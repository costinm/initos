#!/bin/sh

# Setup a VM or container.
# 
# - starts with an OCI image or already expanded rootfs
# - generate startup scripts

IMGDIR=/x/vol/images
SIZE=${SIZE:-10G}
WORK=${WORK:-${HOME}/.cache/initos}

fix() {
    setcap cap_net_admin+ep /opt/virt/cloud-hypervisor
}

from() {
    local img=$1

    mkdir -p /x/vol/${POD}

}

vm() {
    cd /x/vol/${POD}
    
}

# mkdisk will create (or overrite) a BTRFS image and pre-populate it with a rootfs.
mkdisk() {
  local img=$1

  mkdir -p ${IMGDIR}
  
  truncate -s ${SIZE} ${IMGDIR}/${POD}.img
  # Same as - but simpler/faster than
  # qemu-img create -f raw ${WORK}/disk.img 10G

  # Can be mounted using:
  #dev=$(losetup -f ${WORK}/disk.img --show)

  mkdir -p ${WORK}/rootfs

  buildah run --mount=type=bind,from=$img,src=/,dst=/rootfs \
     -v ${IMGDIR}:${IMGDIR} initos-sidecar \
    mkfs.btrfs ${IMGDIR}/${POD}.img --rootdir /rootfs
  #parted $dev mklabel gpt

  # --shrink will keep the image at the required size - can be used for a base image.
}

# TODO: make a read-only disk with 

mkdiskX() {
  local label=$1
  local dir=$2
  SIZE=${SIZE:-10G}

  local temp_dir=$(mktemp -d)
  trap "rm -rf $temp_dir" EXIT
  mkdir -p $temp_dir/$dir
  
  truncate -s ${SIZE} ${IMGDIR}/${POD}-data.img
  mkfs.btrfs ${IMGDIR}/${POD}-data.img -L X -R $temp_dir
}

all() {
  buildah rm vkernel || true
  vkernel
  vinitrd
}

vkernel() {
  buildah --name vkernel from debian:bookworm-slim || true

  buildah copy vkernel setup-vdeb /sbin
  buildah run vkernel /sbin/setup-vdeb debian_rootfs_base

  buildah commit vkernel vkernel 

  mkdir -p ${WORK}/vkernel
  buildah run \
    -v ${WORK}/vkernel:/data \
      vkernel /sbin/setup-vdeb save_boot 

}

vkernelnsh() {
  buildah run -t \
    -v ${WORK}:/data \
      vkernel  /sbin/setup-vdeb /bin/bash
}

vinitrd() {
  buildah copy initos-sidecar setup-vm initos-initrd-vm /sbin 
  mkdir -p ${WORK}/virt

  if [ ! -d ${WORK}/vkernel/boot ]; then
    mkdir -p ${WORK}/vkernel
    buildah run \
      -v ${WORK}/vkernel:/data \
        vkernel  /sbin/setup-vdeb save_boot 
  fi

  buildah run  \
    -e BASE=/data/vkernel \
    -e DEST=/data/virt \
    -e SRC=/sbin \
    -v ${WORK}:/data \
     initos-sidecar /sbin/setup-vm initrd

  if [ ! -f ${WORK}/virt/cloud-hypervisor ]; then
    buildah run  \
      -e DEST=/data/virt \
      -e SRC=/sbin \
      -v ${WORK}:/data \
      initos-sidecar /sbin/setup-vm virt_install
  fi
}

# Download the binaries required for running VMs.
# 
# Currently using cloud-hypervisor and virtiofsd.
# 
# Duplicated in setup-sidecar - remove from there after moving all virt to 
# separate containers.
virt_install() {
  local d=${DEST:-/x/opt/virt}
  mkdir -p $d
  local latest=v44.0
  curl -L https://github.com/cloud-hypervisor/cloud-hypervisor/releases/download/$latest/ch-remote \
    -o ${d}/ch-remote
  chmod +x ${d}/ch-remote
  # Tested 
  curl -L https://github.com/cloud-hypervisor/cloud-hypervisor/releases/download/$latest/cloud-hypervisor-static \
     -o ${d}/cloud-hypervisor
  chmod +x ${d}/cloud-hypervisor

  # Alpine lacks wget -L
  curl -L https://gitlab.com/virtio-fs/virtiofsd/-/jobs/artifacts/main/download?job=publish \
     -o /tmp/virtiofsd.zip
  unzip /tmp/virtiofsd.zip -d /tmp
  mv /tmp/target/x86_64-unknown-linux-musl/release/virtiofsd ${d}/virtiofsd
  rm -rf /tmp/target /tmp/virtiofsd.zip

  cp /usr/bin/ch-remote ${d}/ch-remote.musl
  # Sidecar should be built after the initrd files are generated.
  # The lib/modules are in the debian file.
  # cp /data/virt/* /opt/virt/
}

# Use the initos-base image to copy $1 image to $2 local dir.
# Alternative to 'crane export' - without remote push.
exportfs() {
  buildah --name orig from $1
  
  buildah run \ 
     -v $2:/data
     --mount=type=bind,from=orig,src=/,dst=/mnt \
    initios-base -- cp -a /mnt/ /data
  
  buidah rm orig
}

# Makes the VM initrd. Runs inside the initos-sidecar image
# (or in the real sidecar)
initrd() {
  # Where to find the modules and kernel for creating the initrd.
  # Set to /data when running in a container, /x/@/vkernel will be used
  # to upgrade (the rootfs has non-virtual kernel)
  BASE=${BASE:-/initos/rootfs}
  
  DEST=${DEST:-/x/opt/virt}
  
  SRC=${SRC:-/home/costin/ws/initos/virt}
  
  VER=$(ls ${BASE}/lib/modules | grep cloud | tail)
  cp ${BASE}/boot/vmlinuz-${VER} ${DEST}/vmlinuz
  
  ln -s ${BASE}/lib/modules/${VER} /lib/modules || true

  /sbin/mkinitfs -k  -i ${SRC}/initos-initrd-vm \
     -F "base btrfs virtio initosvm" \
     -o ${DEST}/initramfs ${VER}
}


"$@"
