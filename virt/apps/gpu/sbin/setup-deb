#!/bin/bash

# Debian as a base, add kernel modules, nvidia.
# 
# This is intended as a VM for GPU-related apps, including docker
# (and lxc for the old wrt until it is moved)
set -euo pipefail
set -x 

WORK=${WORK:-/x/initos}

# Will make sure the user exists - useful in pods for
# running as a custom username.
USERNAME=${USERNAME:-build}

export DEBIAN_FRONTEND=noninteractive
APTINSTALL="apt install --assume-yes --no-install-recommends "

# This works - but more generic is to use setup-vm and convert OCI image
# to btrfs using buildah.
# It requires to commit - but given how slow the build is, commit is
# not a big difference.
img() {
  set -x 
  truncate -s 10G /data/gpu.img
  mkdir -p /tmp/img
  cd /
  # tar cf - --exclude=/proc --exclude=/sys --exclude=/dev --exclude=/run \
  #   --exclude='/tmp' --exclude=/var/tmp --exclude=/var/log \
  #   --exclude=/var/lib/docker --exclude=/data --exclude=/img / \
  #   | (cd /tmp/img; tar xf -)
 rsync -au --exclude=/proc --exclude=/sys --exclude=/dev --exclude=/run \
    --exclude='/tmp' --exclude=/var/tmp --exclude=/var/log \
    --exclude=/var/lib/docker --exclude=/data --exclude=/img / /tmp/img/

  mkfs.btrfs -L ROOTFS /data/gpu.img -r /tmp/img
}

all() {
  apt update

  add_deb_kernel
  add_base_users
  tools
  add_deb_core
  add_deb_kernel_nvidia

  systemctl enable ssh.service

  apt clean
}


# Adds Kernel, firmware
# Builds the initrd images for intel/amd uCode.
add_deb_kernel() {
  export INITRD=No
  # Also install the cloud kernel - upgrade them at the same cadence, and
  # will be used to run the real root as a VMs for more security.
  # Images grows from 795 -> 909 M, Initos image from 568-> 634
  $APTINSTALL \
     linux-image-cloud-amd64
  ver=$(ls /lib/modules |grep cloud)
  echo -n ${ver} > /boot/cloud-version

  # Can't stop the creation - but not used. Just need the kernel and modules.
  rm -rf /boot/initrd.img* /tpm/* /tmp/* || true
}


add_deb_core() {
  $APTINSTALL ca-certificates curl gpg 

  $APTINSTALL  \
     tini  bsdutils dosfstools \
      hdparm file findutils fuse3 btrfs-progs lsof \
    \
     rsync ifupdown ifupdown-extra \
      bridge-utils net-tools tcpdump iptables iproute2  \
    nftables iperf3 openssh-server \
     pciutils

  $APTINSTALL docker.io lxc 

}

# Adds Kernel, firmware, Nvidia driver.
# Builds the initrd images for intel/amd uCode.
# This adds X
# 
# Since nvidia also has libraries and docker/podman support - will use 
# this debian image as the 'sidecar OS', so including more packages.
add_deb_kernel_nvidia() {


  # Will use systemd or script - may start it as 'main' as well, without 
  # an actual sidecar.


  # Not the current kernel on the builder machine
 

  curl -fsSL -o /tmp/cuda.deb https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb
  dpkg -i /tmp/cuda.deb
  if [ ! -f /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg ] ; then
     curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey |  gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg 
    curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
      sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
      tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
     apt update
  fi

  # This has systemd as a dependency...
  $APTINSTALL cuda-drivers \
     linux-headers-$(cat /boot/cloud-version) 

  $APTINSTALL nvidia-container-toolkit  
   
  /usr/lib/dkms/dkms_autoinstaller start $(cat /boot/cloud-version | tail )
  dkms status
}

# Users built into the docker image. 
add_base_users() {
  local u=${USERNAME:-build}
  local h=${USER_HOME:-/home/${u}}

  # Template home directory.
  mkdir -p /home/log
  mkdir -p /work
  mkdir -p /home

  # For ubuntu based images - there is a default user with 1000
  (userdel ubuntu || true)

  useradd -u ${USERID:-1000} -g users -G users -s /bin/bash \
         -d ${h} ${u} || true
  usermod -p '*' ${u} || true

  groupadd -g 2000 restic || true
  useradd -u 2000 -g restic -G restic -s /bin/bash \
         -d /x/backup restic || true
  # -p takes an encrypted pass - so this disables pass login
  usermod -p '*' restic || true

  mkdir -p ${h}
  chown ${u} ${h}

}


function tools() {
  $APTINSTALL wget curl ca-certificates gpg \
     net-tools vim mc tmux \
   git less bash-completion \
   openssh-server  rsync

  # SSH: used by code
}

C=${1}
shift
$C "$@"
