#!/bin/sh

# Build script a virtual debian rootfs.
# Kernel, Nvidia modules and basic utils. 
# Can be passed PCIe devices (nvidia in particular).

# Base for debian rootfs for VMs.

set -x
set -e

# Destination dir for the efi partition artifacts.
# May include additional files to bake into images.
# Signing the images also requires a volume holding the signing keys
# and configs.
WORK=${WORK:-/data}

# Save the kernel and modules on /data, to be used by the 'sign' image and
# to build the initrd.
# This is needed since initrd is created by the sidecar/builder image.
save_boot() {
  mkdir -p /data/lib /data/boot
  cp -a /boot/* /data/boot
  cp -a /lib/modules /data/lib
  if [ -e /lib/firmware ]; then
    cp -a /lib/firmware /data/lib
  fi
}

export DEBIAN_FRONTEND=noninteractive
APTINSTALL="apt install --assume-yes --no-install-recommends "


debian_rootfs_base() {
  apt update
  add_deb_kernel
  
  add_deb_core
}

add_deb_core() {
  $APTINSTALL ca-certificates curl gpg  
  $APTINSTALL \
     tini  bsdutils  \
    hdparm file findutils fuse3 btrfs-progs lsof \
    \
    rsync  \
     bridge-utils net-tools tcpdump iptables iproute2  \
    nftables iperf3 openssh-server \
    \
    pciutils
}

# Adds Kernel, firmware, Nvidia driver.
# Builds the initrd images for intel/amd uCode.
# This adds X
# 
# Since nvidia also has libraries and docker/podman support - will use 
# this debian image as the 'sidecar OS', so including more packages.
add_deb_kernel_nvidia() {


  # Will use systemd or script - may start it as 'main' as well, without 
  # an actual sidecar.


  # Not the current kernel on the builder machine
 

  curl -fsSL -o /tmp/cuda.deb https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb
  dpkg -i /tmp/cuda.deb
  if [ ! -f /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg ] ; then
     curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey |  gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg 
    curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
      sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
      tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
     apt update
  fi

  # This has systemd as a dependency...
  $APTINSTALL cuda-drivers \
     linux-headers-$(cat /boot/cloud-version) 

  $APTINSTALL nvidia-container-toolkit  
   
  /usr/lib/dkms/dkms_autoinstaller start $(cat /boot/cloud-version )
  dkms status
}

# Adds Kernel, firmware
# Builds the initrd images for intel/amd uCode.
add_deb_kernel() {
  export INITRD=No
  # Also install the cloud kernel - upgrade them at the same cadence, and
  # will be used to run the real root as a VMs for more security.
  # Images grows from 795 -> 909 M, Initos image from 568-> 634
  $APTINSTALL \
     linux-image-cloud-amd64
  ver=$(ls /lib/modules |grep cloud)
  echo -n ${ver} > /boot/cloud-version

  # Can't stop the creation - but not used. Just need the kernel and modules.
  rm -rf /boot/initrd.img* /tpm/* /tmp/* || true
}


"$@"
