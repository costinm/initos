#!/bin/sh

# Based on Alpine mkinitrd, but with different init script:
# - modified to look for LUKS, use tpm2 or password to unlock and load root from a BTRFS subvol
# - otherwise load recovery.btrfs
# - removed all networking or alpine-specific init.
#
# This allows using the very simple initrd - to just mount a verified root and
# nothing else.

# some helpers from alpine init

# ebegin will record the start of a command in /dev/kmsg and console
ebegin() {
	last_emsg="$*"
	echo "$last_emsg..." > /dev/kmsg
	echo -n " * $last_emsg: "
}

# eend will record the status of the previous command.
eend() {
	if [ "$1" = 0 ] || [ $# -lt 1 ] ; then
		echo "$last_emsg: ok." > /dev/kmsg
	else
		shift
		echo "$last_emsg: failed. $*" > /dev/kmsg
		echo "failed. $*"
    # TODO: save all info to EFI partition if possible.

    # Not running an emergency shell - insecure. 
    sleep 10
	fi
}

# dump info to the EFI partition (which exists if we managed to get the
#  kernel running).
edump() {
  local msg="$*"
  if [ ! -d /boot/efi ]; then
    return
  fi

  echo $msg >> /boot/efi/initos.log
  echo "BLKID:" >> /boot/efi/initos.log
  blkid >> /boot/efi/initos.log
  echo "ORIG_BLKID: $START_BLKID" >> /boot/efi/initos.log
  echo "MOD_BLKID: $MODS_BLKID" >> /boot/efi/initos.log
  echo "Mounts:" >> /boot/efi/initos.log
  mount >> /boot/efi/initos.log
  echo "Mods:" >> /boot/efi/initos.log
  lsmod >> /boot/efi/initos.log
  echo "dmesg:" >> /boot/efi/initos.log
  dmesg >> /boot/efi/initos.log

}

## First step - expand busybox and mount the basic filesystems
initramfs_1st() {
  # No kernel options processed - we build intitramfs and cmdline in the same efi.
  # May read an initrc file if needed - but the goal is to keep it precise and simple.
  # Initramfs does not include the links (for some reason?)
  /bin/busybox mkdir -p /usr/bin \
    /usr/sbin \
    /proc \
    /sys \
    /dev \
    /sysroot \
    /media/cdrom \
    /media/usb \
    /tmp \
    /etc \
    /run/cryptsetup

  # Spread out busybox symlinks and make them available without full path
  # This appears slightly faster than having the initramfs include all symlinks ?
  /bin/busybox --install -s

  export PATH="$PATH:/usr/bin:/bin:/usr/sbin:/sbin"

  # Make sure /dev/null is a device node. If /dev/null does not exist yet, the command
  # mounting the devtmpfs will create it implicitly as an file with the "2>" redirection.
  # The -c check is required to deal with initramfs with pre-seeded device nodes without
  # error message.
  [ -c /dev/null ] || mknod -m 666 /dev/null c 1 3

  mount_proc
}

# Part of the first step - mount proc, sys, etc
mount_proc() {
  if [ -e /proc/cmdline ]; then
    return
  fi

  mount -t sysfs -o noexec,nosuid,nodev sysfs /sys

  mount -t devtmpfs -o exec,nosuid,mode=0755,size=2M devtmpfs /dev 2>/dev/null \
    || mount -t tmpfs -o exec,nosuid,mode=0755,size=2M tmpfs /dev

  # Make sure /dev/kmsg is a device node. Writing to /dev/kmsg allows the use of the
  # earlyprintk kernel option to monitor early init progress. As above, the -c check
  # prevents an error if the device node has already been seeded.
  [ -c /dev/kmsg ] || mknod -m 660 /dev/kmsg c 1 11

  ebegin "Mounting core filesystems"

  mount -t proc -o noexec,nosuid,nodev proc /proc

  # pty device nodes (later system will need it)
  [ -c /dev/ptmx ] || mknod -m 666 /dev/ptmx c 5 2
  [ -d /dev/pts ] || mkdir -m 755 /dev/pts

  mount -t devpts -o gid=5,mode=0620,noexec,nosuid devpts /dev/pts

  # shared memory area (later system will need it)
  mkdir -p /dev/shm
  mkdir -p /run

  mount -t tmpfs tmpfs /run

  mount  -t efivarfs efivarfs /sys/firmware/efi/efivars

  mount -t tmpfs -o nodev,nosuid,noexec shm /dev/shm
}


# support for eudev. see /etc/init.d/udev*
# At the end we need to call
# udevadm control --exit
eudev_start()
{
	if [ -e /proc/sys/kernel/hotplug ]; then
		echo "" >/proc/sys/kernel/hotplug
	fi
  ebegin "Start udev"
	udevd -d

	[ -d /etc/udev/rules.d ] || mkdir -p /etc/udev/rules.d

#	local file dest
#	for file in /run/udev/tmp-rules--*; do
#		dest=${file##*tmp-rules--}
#		[ "$dest" = '*' ] && break
#		type=${dest##70-persistent-}
#		type=${type%%.rules}
#		cat "$file" >> /etc/udev/rules.d/"$dest" && rm -f "$file"
#	done

	udevadm hwdb --update

	# Populating /dev with existing devices through uevents
	udevadm trigger --type=subsystems --action=add
	udevadm trigger --type=devices --action=add
	eend $?
}


# retry function
retry() {
  retries=$1
  shift

  count=0
  until "$@"; do
    exit=$?
    wait=$((count + 1))
    count=$((count + 1))
    if [ "$count" -lt "$retries" ]; then
      echo "Retry $count/$retries exited $exit, retrying in $wait seconds..."
      sleep $wait
    else
      echo "Retry $count/$retries exited $exit, no more retries left."
      return $exit
    fi
  done
}

# Second step: Load the modules from /etc/modules and keymaps
initramfs_mods() {
  if [ -f /etc/modules ] ; then
    sed 's/\#.*//g' < /etc/modules |
    while read module args; do
      modprobe -q $module $args
    done
  fi

  modprobe usbcore
  modprobe ehci-hcd
  modprobe ohci-hcd
  modprobe xhci-hcd
  modprobe usb-storage
  modprobe scsi_mod
  modprobe sd_mod
  modprobe squashfs
}

# The root is a btrfs unencrypted volume. (dm-verity or btrfs signing will be used
# instead for verification if the machine is locked).
find_and_mount_root() {

  # Create a mount point for the new root
  mkdir -p /sysroot

  if [ -f /sysroot/sbin/init ]; then
    return
  fi

  # Normal path - find a cryptsetup disk - that's where we expect the root to be.
  # This won't work if we have multiple LUKS partitions...
  # TODO: save the root in a file (can be signed - or just rely on the fact it won't open
  # unless it has the right key).

  cryptd=$(blkid | grep 'TYPE="crypto_LUKS"' | cut -d: -f1 )
  if [ -n "$cryptd" ]; then
    echo "Found LUKS device: ${cryptd}"
    unlock_c $cryptd
    if [ $? -eq 0 ]; then
      return
    fi
  fi

  usbd=$(findfs LABEL=BOOT)
  if [ -n "$usbd" ]; then
    mount_recovery_dev $usbd
    if [ $? -eq 0 ]; then
      return
    fi
  fi


  for i in $(ls /media); do
    if [ -f /media/$i/recovery.sqfs ]; then
      if mount_recovery_dir /media/$i ; then
        echo "Mounted recovery from /media/$i"
        return
      fi
    fi
  done
}

unlock_c() {
  local part=$1

  if cryptsetup luksOpen $part c; then
    mount_btrfs /dev/mapper/c
  else
    echo "Error: Failed to unlock LUKS partition"
    return 1
  fi
}


# Mount a BTRFS volume as /sysroot - ready for the witch root
mount_btrfs() {
  local root_device=$1

  BTRFS_OPTS="-o nobarrier -o compress"

  # Mount the root device
  mount -t btrfs "${root_device}" /sysroot -o subvol=recovery

  # TODO: if the lib/modules and firmware are missing - unsquash the modloop-lts after
  # verifying the signature/
}

# If a USB disk is connected or LUKS open fails or root loading fails or on 'first install'
# - use the recovery image on the usb disk.
mount_recovery_dev() {
  local disk=${1:-/dev/sda1}

  mkdir -p /boot/efi

  mount -t vfat ${disk} /boot/efi
  if [ $? -ne 0 ]; then
    echo "Error: Failed to mount EFI partition"
    return 1
  fi

  mount_recovery_dir /boot/efi
}

mount_recovery_dir() {
  local dir=${1:-/media/sda1}
  # It would be tempting to add persistent overlay here and make the root
  # modifiable - but that breaks the security model, we can't verify the overlay.
  # For any configs, certs, etc - we can add them to the UKI or rebuild.

  # From alpine original script
  mkdir -p /media/root-ro /media/root-rw /sysroot/media/root-ro /sysroot/media/root-rw

  mount -o loop,ro -t squashfs ${dir}/recovery.sqfs /media/root-ro
  if [ $? -ne 0 ]; then
    echo "Error: Failed to mount recovery"
    return 1
  fi

#  mkdir -p /lib/modules /.modloop
#  mount -o loop -t squashfs ${dir}/boot/modloop-lts /.modloop

  mount -t tmpfs root-tmpfs /media/root-rw
  mkdir -p /media/root-rw/work /media/root-rw/root

  mount -t overlay \
   -o lowerdir=/media/root-ro,upperdir=/media/root-rw/root,workdir=/media/root-rw/work \
   overlayfs /sysroot
}

# All remaining mounted dirs will be moved under same dir in /sysroot,
# ready to switch_root
move_mounted_to_sysroot() {
  # From original alpine init
  cat /proc/mounts 2>/dev/null | while read DEV DIR TYPE OPTS ; do
    if [ "$DIR" != "/" -a "$DIR" != "/sysroot" -a -d "$DIR" ]; then
      mkdir -p /sysroot/$DIR
      mount -o move $DIR /sysroot/$DIR
    fi
  done

  sync
}


unlock_tpm() {
  PASSPHRASE=$(tpm2_unseal -c 0x81000000 -p pcr:sha256:0,1,2,3)
  echo -n "$PASSPHRASE" | cryptsetup luksOpen $part c -

  #export TPM2TOOLS_TCTI="device:/dev/tpm0"
  # returns the password
  #/usr/bin/tpm2_unseal -H 0x81000000 -L sha1:0,2,3,7
}

# Verify the signature of a file using a public key.
#
verify() {
  file_to_verify="$1"
  signature_file="$2"
  public_key_file="$3"

  # Calculate the SHA256 hash of the file
  sha256_hash=$(sha256sum "$file_to_verify" | awk '{print $1}')

  # Verify the signature using the public key
  openssl dgst -sha256 -verify "$public_key_file" -signature "$signature_file" <(echo "$sha256_hash")

  #minisign -Vm <file> -P RWSpi0c9eRkLp+M2v00IqZhHRq2sCG6snS3PkDu99XzIe3en5rZWO9Yq

  # Check the verification result
  if [[ $? -eq 0 ]]; then
    echo "Verification successful!"
  else
    echo "Verification failed!"
  fi
}

# Main entry point - called by the init script
initramfs_init() {
  set -x # For debugging - may be removed later, but useful to see what is happening.

  echo "Starting initramfs"

  modprobe -a simpledrm

  echo "Loaded simple DRM, console should be visible"

  initramfs_1st

  echo "base init - proc, etc"

  # Save the current blkid - before loading the other modules
  export ORIG_BLKID=$(blkid)

  [ -f /etc/initos.conf ] && . /etc/initos.conf

  env

  # Load a set of core modules we use
  initramfs_mods

  # Save the current blkid - before loading the other modules
  export MODS_BLKID=$(blkid)

  busybox sh

  # nlplug-findfs looks for the root device - it includes the crytpsetup mounting
  # capabilities, is aware of lvm, zpool, mdadm.
  # It does the 'read pass' itself and has cryptsetup linked - lvm/zpool/mdadm are
  # exec. Not useful with the 'opinionated' btrfs root and TPM2
  #
  # It scans /sys/bus, /sys/class generating uevents.
  # .boot_repository is used to mark root devices
  # As a side-effect, it loads all relevant modules !
  # This will force loading the modules
  # If /tmp/apkovls and .boot_repository - they are mounted. Normal alpine has
  # additiona loading for them - we don't use since it's not signed.
  #
  # Devices that contain what looks like apk overlay are mounted under /media/xxx
  # USB may not show up
  nlplug-findfs -p /sbin/mdev -t 5000 -a /tmp/apkovls -b /tmp/repositories LABEL=BOOT &

  read -t 6 -n 1 key
  if [ "$key" = 'u' ]; then
    echo "Key 'u' pressed."
    export USB_BOOT=1
  else
    echo "Timeout or different key pressed."
  fi

  # TODO: check if a key is pressed on keyboard (with timeout)

  find_and_mount_root

  while [ ! -f /sysroot/sbin/init ]; do
    echo "Error: Unable to find root device: mount manually and exit shell to continue"
    echo "You can call '/init mount_recovery_dev DEVICE' to mount a device"
    echo "/init mount_recovery_dir DIR - if the recovery in in a dir"

    sleep 4
    /bin/busybox sh

    find_and_mount_root

  done

  # Only for unsigned boot - will need to be encrypted otherwise.
	if [ -e "$ROOT"/tmp/apkovls ]; then
		ovl=$(head -n 1 "$ROOT"/tmp/apkovls)
		unpack_apkovl $ovl
	fi

  echo "Rootfs mounted, preparing to switch root"

  # Only unsigned debug image
  if [ "$key" = 'a' ]; then
    echo "Key 'a' pressed."
    /bin/busybox sh
  fi

  move_mounted_to_sysroot
  echo "Switching root"
  exec switch_root /sysroot /sbin/init
}

unpack_apkovl() {
	local ovl="$1"

	ovlfiles=/tmp/ovlfiles

  tar -C /sysroot -zxvf "$ovl" > $ovlfiles
  return $?
}

if [ "$$" == "1" ]; then
  # Running as PID 1 - initramfs
  initramfs_init
else
  #if [ -e /sbin/init ]; then
    # Already running - not initramfs, just exec the function.
  $*
  #  return
  #fi

  #initramfs_init

fi

