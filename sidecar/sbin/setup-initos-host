#!/bin/sh

# Install script for Initos. It assumes it was directly booted or chroot/container in the recovery image, where all
# tools are available.
# 
# wipe_disk  requires the /dev/DISK to be available - bind mount if running in a container.
# 
# 
# Init script for USB and 'debug' boot - should NOT be used with
# signed UKI images since it provides root shell access.
#
# Use for installing to signed UKI - followed by enabling secure boot.
# In case of problems - disable secure boot and use this image.
#
# Will use the rootfs from USB disk, if a USB disk is found.

# Issue: on first boot into secure mode, LUKS will not be unlocked
# since we changed the parameters. So first time requires a ssh access
# from the 'control plane' to save the key into TPM2. The control plane
# has the root key to unlock the LUKS recovery.

# Where to store the luks key during setup (some commands require a file)
SECRETS=/run/secrets/luks

# Unlike ignition (which runs in Dracut initramfs), this script runs on a full alpine OS
# with networking and the usual tools. It is not designed to wipe the disk or be declarative -
# just to configure the minimum required for the machine to boot with the signed UKI image
# and have the recovery image available.

# It does have ability to create an EFI, LUKS and btrfs filesystem on an empty disk, but
# will require explicit user action to do so on a non-empty disk. If EFI/LUKS and btrfs
# are present - it will add itself to EFI and to a btrfs subvolume.

# It can also download an OCI rootfs and save it to a subvolume, and use it on next
# boot.

# Each function should do a simple operation and be kept very simple and easy to be
# modified to fit specific needs - without having to add complex config and logic to
# hide what is actually happening.

# Will wipe a disk a create the partitions needed for initos.
# This should be called explicitly by the user - it will normally not be done automatically.
# In practice we need ~100M on the EFI, and some btrfs volume.
#
install_wipe_disk() {
  DISK=${1:-/dev/nvme0n1}

  # if disk contains 'nvme', add 'p'
  suffix=""

  # if $DISK contains /dev/nvme, set suffix to p
  if echo "$DISK" | grep -q "nvme"; then
    suffix="p"
  fi
  if echo "$DISK" | grep -q "mmcblk"; then
    suffix="p"
  fi

  # use 100% to fill the disk. This is total, EFI and root.
  # It is possible to later use the rest of the disk for LUKS, LVM or other work partitions.

  # List partitions with parted
  partitions=$(parted --script --machine -- "${DISK}" unit s print)

  parted --script --machine -- "${DISK}" mklabel gpt

  # 512M would fit - but painful, better to have some
  # space.
  # a single partition is hard to manage.
  parted "$DISK" mkpart primary fat32 1 2048
  parted "$DISK" set 1 boot on
  parted "$DISK" set 1 esp on
  parted "$DISK" name 1 "BOOTA"

  parted "$DISK" mkpart primary fat32 2048 4096
  parted "$DISK" name 2 "BOOTB"
  parted "$DISK" set 2 esp on
  
  # Create the LUKS partition
  parted "$DISK" mkpart primary ext4 4096 100%
  parted "$DISK" name 3 "INITOSLUKS"

  partprobe $DISK

  bootd ${DISK}${suffix}1 BOOTA
  bootd ${DISK}${suffix}2 BOOTB

  #install_boot_options ${DISK}
}

install_wipe_usb() {
  DISK=${1:-/dev/sda}

  parted --script --machine -- "${DISK}" mklabel gpt

  parted "$DISK" mkpart primary fat32 1 4096
  parted "$DISK" set 1 boot on
  parted "$DISK" set 1 esp on
  parted "$DISK" name 1 "BOOTUSB"
  
  # Create the LUKS partition
  parted "$DISK" mkpart primary ext4 4096 100%
  parted "$DISK" name 2 "INITOSLUKSUSB"

  partprobe $DISK

  bootd ${DISK}1 BOOTUSB

  #install_boot_options ${DISK}
}

# Initialize the boot partition - make filesystem, copy the 
# EFI files from USB (or primary partition)
bootd() {
  local PART=$1
  local LABEL=$2

  mkfs.vfat ${PART} -n $LABEL
  mkdir -p /mnt/$LABEL
  mount ${PART} /mnt/$LABEL
  cp -a /boot/efi/* /mnt/$LABEL
}

boot() {
  install_boot_options "$@"
}

# This must be called after changing the partition tables.
# 
install_boot_options() {
  d=${1:-/dev/nvme0n1}
  efibootmgr -B -b 1001
  efibootmgr -B -b 1002
  efibootmgr -B -b 1003
  efibootmgr -B -b 1004

  # '-u XXXX' will override the command line - but only in insecure boot.
  # If booting insecure, this works as a USB recovery/install
  # efibootmgr -c -d ${d} -p 2 \
  #     -b 1003 \
  #     -u 'console=ttyS0 rdinit=/sbin/initos-initrd console=tty1 net.ifnames=0 panic=5 initos=USB loglevel=6 debug iomem=relaxed' \
  #     -L "InitOS InsecureB" -l "\initosA.EFI"

  efibootmgr -c -d ${d} -p 1 \
      -b 1003 \
      -L "InitOS InSecureA" -l "\EFI\BOOT\BOOTx64.EFI"

  efibootmgr -c -d ${d} -p 2 \
      -b 1004 \
      -L "InitOS InSecureB" -l "\EFI\BOOT\BOOTx64.EFI"

  efibootmgr -c -d ${d} -p 2 \
      -b 1002 \
      -L "InitOS SecureB" -l "\initosA.EFI"

  efibootmgr -c -d ${d} -p 1 \
      -L "InitOS SecureA" \
      -b 1001 \
      -l "\initosA.EFI"
 

  # -a - set active 
  # -b - modify 
  # -o - boot order
  
  # -n - set boot next
  # -N - delete boot next
  # Delete: -B -b n
  #efibootmgr --bootorder 0001,0002,0000
}

bootNext() {
  local id=$1

  rm  /sys/firmware/efi/efivars/dump-*
  efibootmgr -n $id
  sync
  reboot -f
}

# Run before the upgrade - mounts the 'next' EFI partition, 
# remove old files if the SQFS has changed (small disk, rsync doesn't work
# very well)
# Args: hash of new image (compared to old, will remove to avoid issues)
# optional label of partition to upgrade, defaults to /var/initos/BOOT_NEXT.
upgrade_start() {
  local newh=${1}
  local clabel=${2}

  # Created by InitRD based on the label it used for the current boot.
  # If it used BOOTA - BOOT_NEXT will be B
  local next=$(cat /var/initos/BOOT_NEXT)
  local label=BOOT${next:-B}

  if [ "$clabel" != "" ]; then 
    label=$clabel
  fi

  mkdir -p /boot/b
  mount LABEL=$label /boot/b
  if [ $? -ne 0 ]; then
    echo "Failed to mount $label to /boot/b"
    return 1
  fi

  local eh=$(cat /boot/b/initos/initos.hash )

  if [ "$eh" = "$newh" ]; then
    echo "Mounting $label to /boot/b - same SQFS $newh"
  else
    echo "Mounting $label to /boot/b and accepting new version $newh existing $eh"
    rm -f /boot/b/initos/initos.*
    rm -f /boot/b/initos/rootfs.*
  fi
}

# Finish the upgrade. Optional 'reboot' CLI to restart, otherwise on next
# boot the new image will be used.
# 
# After the new image is healthy, a 'swapNext' needs to be called to make 
# it default.
upgrade_end() {
  umount /boot/b

  rm  /sys/firmware/efi/efivars/dump-*
  local c=$(cat /var/initos/BOOT_CURRENT)
  if [ "$c" = "1001" ]; then 
    efibootmgr -n 1002 
  elif [ "$c" = "1002" ]; then 
    efibootmgr -n 1001 
  elif [ "$c" = "1003" ]; then 
    efibootmgr -n 1004 
  elif [ "$c" = "1004" ]; then 
    efibootmgr -n 1003 
  else 
    efibootmgr -n 1001 
  fi

  sync
  if [ "$1" = "reboot" ]; then 
    /sbin/setup-initos-host upgrade_reboot &
    echo "Rebooting in 5 seconds"
  fi

  return 0
}

upgrade_reboot() {
  sync
  sleep 5
  reboot -f
  
}

# swapNext is useful for switching A and B as first. 
# The other approach is to upgrade B, test if it works, upgrade A while B is running - and reboot.
# That means 2 reboots and risk that B will have a late failure.
swapNext() {
  local c=$(cat /var/initos/BOOT_CURRENT)
  if [ "c" = "1001" ]; then 
    efibootmgr -o 1002,1001
  elif [ "c" = "1002" ]; then 
    efibootmgr -o 1001,1002
  elif [ "c" = "1003" ]; then 
    efibootmgr -o 1004,1003
  elif [ "c" = "1004" ]; then 
    efibootmgr -o 1003,1004
  else
    efibootmgr -o 1002,1001
  fi
}

# Create and mounts the LUKS device. key is the second param.
mkLUKS() {
  local PART=$1
  local KEY=$2
  local MAPPER=${3:-c}

  # Linux LUKS partition type is 8309
  # -v -c aes-xts-plain64 -s 512 --hash sha512 --pbkdf pbkdf2 \
  #   --iter-time 1000 --use-random
  echo -n "${KEY}" | cryptsetup luksFormat --type luks2 ${PART} -

  echo -n "${KEY}" | cryptsetup luksOpen ${PART} ${MAPPER} -
}

mkbtrfs() {
  local MAPPER=${1:-c}
  local DPATH=${2:-/x}

  mkfs.btrfs /dev/mapper/${MAPPER}
  # Doesn't really matter, visible after encyption unlock.
  btrfs filesystem label /dev/mapper/${MAPPER} "INITOSROOT"

  mount /dev/mapper/${MAPPER} ${DPATH}
}

addbtrfs() {
  local MAPPER=${1:-luks-2}
  local DPATH=${2:-/x}

  btrfs device add /dev/mapper/${MAPPER} ${DPATH}
  btrfs filesystem show
}

# Initialize the /x BTRFS disk with expected volumes and files
xinit() {
  mksubvol


}

mksubvol() {
    btrfs subvol create /x/vol
    btrfs subvol create /x/@home
    btrfs subvol create /x/@cache
    btrfs subvol create /x/@log

    # Subvolume for large images (no copy on write)
    mkdir -p /x/vol/images
    chattr +C /x/vol/images

    mkdir -p /x/images
    chattr +C /x/images

    btrfs subvol create /x/initos
}

# Create a LUKS encrypted filesystem, with a btrtf volume on top.
# The password is random and saved to TPM and in 'escrow' using the /boot/root.pem public key
# (that means the mesh owner can recover the passoword)
mkcrypt() {
  local DISK=$1

  init_pass

  save_tpm_full ${KEY}

  mkLUKS "$DISK" "${KEY}"
}

# Add a key to the LUKS partition. This is a recovery key, not the main key - allows owner to open the disk 
# without TPM.
luks_add_key() {
  local DISK=$1

  cryptsetup luksAddKey $DISK ${SECRETS}/key
}

luks_add_pass() {
  local DISK=$1
  local key_file=$2

  cat $SECRETS/key | cryptsetup luksAddKey $DISK
}

genpass() {
  cat /dev/urandom | \
     tr -dc a-zA-Z0-9 | \
     head -c14; echo
}

init_pass() {
  #export KEY=$(openssl rand -base64 32)
  export KEY=$(genpass)

  mkdir -p $SECRETS
  echo -n "${KEY}" > $SECRETS/key
  encrypt_key $KEY
}

encrypt_key() {
  local KEY=$1 

  if [ -f /boot/root.pem ]; then
    echo -n "${KEY}" | openssl pkeutl -encrypt \
         -pubin -inkey /boot/root.pem \
         -pkeyopt rsa_padding_mode:oaep \
         -pkeyopt rsa_oaep_md:sha256 \
         -out /x/initos/DISK_RECOVERY_KEY

    cp /x/initos/DISK_RECOVERY_KEY /boot/efi/initos/${HOSTNAME}.recovery 
  fi
}

recover_key() {
  local ENCRYPTED_PASSPHRASE_FILE=$1
  PRIVATE_KEY=$HOME/.ssh/id_ecdsa

  KEY=$(openssl pkeyutl -decrypt \
     -inkey $PRIVATE_KEY -in $ENCRYPTED_PASSPHRASE_FILE \
     -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256)
}


HANDLE=${HANDLE:-0x81000001}

# On Chromebook, only -C p works. 
# On another laptop - default works (owner)
#   -C e also works .
#TPM_KIND="-C p"

TPM_KIND=${TPM_KIND:-}
PRIMARY=${PRIMARY:-0x81000000}
HANDLE=${HANDLE:-0x81000001}

get_pass_tpm() {
    KEY=$(tpm2_unseal -c ${HANDLE} -p pcr:sha256:7)
    echo ${KEY}
}

list() {
  tpm2_getcap handles-persistent
}

seed() {
  # Disk is read only - but allows adding a new disk, where the writes
  # will go. This can be useful with VMs, sharing a RO base.
  btrfstune -S 1 ${dev}
}

ext4btrfs() {
  local disk=$1

  e2fsck -fvy ${disk}
  btrfs-convert ${disk}

  # btrfs subvolume delete /x/ext2_saved
}

# Run a command in a recovery chroot
recovery() {
  /initos/recovery/usr/bin/arch-chroot /initos/recovery "$@"
}

chk_firmware() {
  set +x
  # Get a list of all loaded modules - mostly AI generated.
  modules=$(lsmod | awk 'NR>1 {print $1}')

  for module in $modules; do
    modinfo_output=$(/usr/sbin/modinfo $module)

    # Extract firmware information
    #firmware_lines=$(echo "$modinfo_output" | grep -i 'firmware:')
    firmware_lines=$(echo "$modinfo_output" | grep -ioE 'firmware:[[:space:]][^ ]+' | cut -d ' ' -f2-)

    if [ -n "$firmware_lines" ]; then
      echo $module
      while read -r firmware; do
          echo "$module: $firmware"
      done < "$firmware_lines"
    fi
  done
}

get_firmware_info() {
  # Get a list of all loaded modules
  modules=$(lsmod | awk 'NR>1 {print $1}')

  for module in $modules; do
    modinfo_output=$(modinfo $module)

    # Extract firmware information
    firmware_lines=$(echo "$modinfo_output" | grep -i 'firmware:')

    if [ -n "$firmware_lines" ]; then
      echo $module "$firmware_lines"
    fi
  done
}

create_ec() {
  # Endorsement key
  #tpm2_createek -c primarye.ctx -G 0x01 
  # 0x80000000
  #  tpm2_print -t TPMS_CONTEXT primary.ctx # -> Handle: 0x80000000

  tpm2_ptool init
  
  tpm2_ptool addtoken --pid=1 --label=ssh \
     --sopin='admin-password' --userpin='user-password'
  
  tpm2_ptool addkey --algorithm=rsa2048 --label=ssh --userpin='user-password'
  
  ssh-keygen -D /usr/lib/pkcs11/libtpm2_pkcs11.so
  ssh -I /usr/lib/pkcs11/libtpm2_pkcs11.so some.host.name

}

create_primary() {
  mkdir -p /boot/efi/initos

  # On Chromebook, only -C p works. On another laptop - default only (owner), -C e also works .
    # -C hierarch - e for endorsement, default is owner, also platform
    # -g sha256 - default
    # -G defaults to rsa2048:null:aes128cfb
    # -c file - where to store the 'context' (info about key)
  tpm2_createprimary  -c primary.ctx --format=pem \
     --output=primary_pub.pem ${TPM_KIND}
 

    # displays info - including key handle (it seems to be temporary )
  tpm2_print -t TPMS_CONTEXT primary.ctx # -> Handle: 0x80000000
  
  ### Handle: 0x80000000, sequence: 2, 6, 10, etc - size 1914
 
  tpm2_evictcontrol -c ${PRIMARY} # Delete the old key with this ID
    # Get a persistent handle
  tpm2_evictcontrol -c primary.ctx -o primary.tr ${TPM_KIND} # Save the key - should have the same ID
  # persistent-handle: 0x8100...0
  tpm2 print -t ESYS_TR primary.tr
  # TODO: extract hndle - this is a long test
  phandle=$(tpm2_print -t ESYS_TR primary.tr | grep handle: | awk '{print $2}')

  echo $phandle > /boot/efi/initos/tpm_primary
}

set_pass() { 
  mkdir -p /initos/tpm
  cd /initos/tpm
#  tpm2_getcap handles-persistent | grep -q 0x81800001
  # if [ $? -ne 0 ]; then
  # fi
  
  # Can be called multiple times, same result
  # Shows the same output every time, probably fine to repeat.
  #tpm2_createpolicy --policy-pcr -l sha256:0,1,2,3 -L policy.digest
  #tpm2_createpolicy --policy-pcr -l sha256:8 -L policy.digest
  
  tpm2_createpolicy --policy-pcr -l sha256:7 -L policy.digest
  cp policy.digest /boot/efi/initos/tpm_policy.digest
    # not setting -L makes the key accessible in all cases
    # -i - -- stdin, max 128 bytes
    # -u and -r seem to be used to allow the object to be moved to another TPM
    # -C context (parent object) - not sure how to list
    # -r and -u - where to store the output

  PRIMARY=$(cat /boot/efi/initos/tpm_primary)

  KEY=${KEY:-$(setup-initos-host genpass)}
  export KEY
  # primary.tr or 0x81000000 - the eviccontrol handle
  echo ${KEY} | tpm2_create -u key.pub -r key.priv -C ${PRIMARY} -L policy.digest -i -

  cp key.pub /boot/efi/initos/tpm_key.pub

  #tpm2_evictcontrol -c ${HANDLE} # Delete the key. key.ctx too
  # Can use primary.ctx instead of handle ID. 
  # Should save to EFI the handles to avoid loading.
    # -c - the out file for the context for the key
    # tpm2_create generates the 'export' files.
  tpm2_load -C ${PRIMARY} -u key.pub -r key.priv -c key.ctx -n key.name
  
  tpm2_evictcontrol -c key.ctx ${TPM_KIND} | \
     grep handle: | awk '{print $2}' > /boot/efi/initos/tpm_handle # -> Handle: 0x80000000
  

  # TODO: parse the handle only.

#   # persistent-handle: 0x81000001
}


# host files identifies the (insecure) host config. It is used for the recovery
# image customization or for the rootfs configuration.
# In secure mode it can be signed or encrypted - but it can't hold private keys
# secure unless TPM is used - however at that point a real disk is simpler.
find_mac() {
  if [ -f /sys/class/net/wlan0/address ]; then
    export MAC=$(cat /sys/class/net/wlan0/address)
  elif [ -f /sys/class/net/eth0/address ]; then
    export MAC=$(cat /sys/class/net/eth0/address)
  else
    export MAC="00:00:00:00:00:00"
  fi

  MAC=${MAC//:/-}

}

"$@"
