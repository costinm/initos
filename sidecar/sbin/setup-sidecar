#!/bin/sh

set -x

# Default target for recovery in docker
install() {
  echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
  apk -U --no-progress update

  add_builder
  alpine_add_common
  alpine_add_recovery
  # Podman, buildah, cloud hypervisor
  alpine_add_virt

  [ -f /etc/resolv.conf ] ||  echo "nameserver 1.1.1.1" > /etc/resolv.conf

  mkdir -p /boot/efi
  mkdir -p /lib/modules
  mkdir -p /lib/firmware
  mkdir -p /mnt/usb

  alpine_add_base
  
  apk del busybox-mdev-openrc || true

  (cd /etc/init.d && ln -s agetty agetty.tty1)
  (cd /etc/init.d && ln -s agetty agetty.tty2)
  #set -e

  #rc-update add agetty.tty1 boot
  #rc-update add agetty.tty2 default
  #rc-update add agetty.ttyS0 boot
  #rc-update add agetty.hvc0 boot

  rc-update add devfs sysinit
  rc-update add dmesg sysinit

  # Those 3 can be used instead of udev
  # This is the busybox mdev
  # apk add busybox-mdev-openrc
  # busybox-mdev busybox-mdev-openrc
  #apk add mdev-conf
  #rc-update add hwdrivers sysinit
  #rc-update add mdev sysinit

  # apk add --quiet mdevd mdevd-openrc
  #rc-update add hwdrivers sysinit
  #rc-update add mdevd-init sysinit
  #rc-update add mdevd sysinit

  # modloop will load after dev-mount, read KOPT_modoop and KOPT_modloop_verify
  # checks using openssl using public key under /etc/apk/keys/*.pub
  # Modules are loaded as overlay (so more can be added)
  #rc-update del modloop sysinit
  rc-update add udev sysinit
  rc-update add udev-trigger sysinit
  rc-update add udev-settle sysinit
  rc-update add cgroups sysinit

  #  rc-update add connman boot
  rc-update add acpid boot
  rc-update add ntpd boot
  rc-update add wpa_supplicant boot
  rc-update add modules boot
  rc-update add sysctl boot
  rc-update add hostname boot
  rc-update add bootmisc boot
  rc-update add syslog boot
  rc-update add hwclock boot

  rc-update add networking default
  rc-update add sshd default
  #rc-update add dropbear default
  rc-update add udev-postmount default


  rc-update add mount-ro shutdown
  rc-update add killprocs shutdown
  #rc-update add savecache shutdown

  rc-update --update

  mkdir -p /opt/initos/local 
  rm -rf /tmp/*
}

# Packages for generating the initrd.
# This can be used to create a standalone signer/builder - but 
# for now moving it back to the sidecar, simpler.
# 
# To check: gzip -dc ../initos-initrd.img | cpio -idmv
add_builder() {
  apk add ca-certificates-bundle curl \
   efi-mkuki efi-mkkeys sbsigntool squashfs-tools \
   cryptsetup mkinitfs zstd \
  openssl openssh openssh-keygen \
     eudev eudev-hwids udev-init-scripts \
      udev-init-scripts-openrc \
      dosfstools 
  
  # Udev used in initrd
  

  echo 'disable_trigger=yes' >> /etc/mkinitfs/mkinitfs.conf

  # To create IMGs:   dosfstools parted 
}

# Useful packages for a host. 
alpine_add_common() {

  #apk list -I

  #apk add alpine-base # Installs openrc
  apk add  \
    openrc tini \
     busybox-openrc \
    alpine-conf  alpine-release \
     eudev eudev-hwids udev-init-scripts \
      udev-init-scripts-openrc \
    \
     tpm2-tools tpm2-tss-tcti-device \
      tpm2-tss-tcti-cmd tpm2-tss \
    \
    busybox-suid bash  mc tmux git \
    busybox-binsh \
    findutils findmnt \
    htop haveged \
    sudo strace util-linux procps \
    arch-install-scripts \
    \
    openssh openssh-keygen openssh-sftp-server  sshfs \
    curl rsync \
    ca-certificates-bundle \
    ifupdown-ng libcap2 iproute2 iw ifupdown-ng ifupdown-ng-wifi \
    wpa_supplicant wpa_supplicant-openrc \
    bridge \
    socat tcpdump iputils  \
     \
    lsblk  hdparm fio qemu-img \
     btrfs-progs duperemove parted dosfstools lsscsi \
    lvm2 \
    irqbalance \
    lm-sensors \
    mdadm \
    smartmontools dmidecode \
      pciutils \
        nvme-cli \
  
  #sedutils

  # Not sure: this seems to take over some interfaces  
  # dhcpcd
  
  #setup-devd udev

  # busybox will add busybox-mdev as baseline
  
      
  # Alternative: dropbear dropbear-openrc
  
    # Using it for few things - minisign can probably be used instead.
    # 765k bin + 5M lib
    # apk add openssl
    # apk add ssl_client
      
  # tini: init with a single process. Can reap even if not running as PID1.

  # arch-chroot works great with other OSes

  # Recovery or host utils

  # sgdisk gptfdisk

  # fsverity CLI
  #apk add fsverity-utils

  # Others that may be useful but not required:

  # apk add kmod lddtree kmod-libs
  #  apk add iproute2 tcpdump procps

  # Can also encrypt/decrypt - 3.7M + 2M for keygen
  #apk add age

  #e2fsprogs

  # troubleshooting
  #apk add pcituils

  # apk add lvm2
}

# Packages for building EFI UKI and image
alpine_add_recovery() {

  #### Building the images and UKI

  # To build the UKI
  apk add mkinitfs
  # Don't rebuild automatically.
  echo 'disable_trigger=yes' >> /etc/mkinitfs/mkinitfs.conf

  apk add efi-mkuki efi-mkkeys sbsigntool squashfs-tools \
     binutils uuidgen cryptsetup efibootmgr zstd


  # clevis adds bash, jose, cacklib.
  # has nice network-based unlock
  # apk add clevis

  # 400k - smallest util to sign/verify.
  #apk add minisign

  # To modify keys, control efi
  # mokutil

  # To decompress firmware in zstd format (debian doesn't load it)
}

# Base users, groups, packages.
alpine_add_base() {
  if [ -e /home/build ]; then
    return
  fi
  

  addgroup -g 1000 build
  addgroup -g 1001 admin

  # -H: don't create home
  # -D: no pass
  # -S - system user - nologin (i.e. /bin/login and passwd access will be disabled - ssh ok)
  # -g - 'gecos' or name
  adduser -G build -g "Builder" build -u 1000 -D -s /bin/sh -h /home/build
  adduser -G admin -g "Admin" admin -u 1001 -D -s /bin/sh -h /home/admin

  # Add the user to the sudoers group
  addgroup admin wheel
  addgroup admin kvm

  addgroup build users # otherwise swayunlock fails, /etc/shaddow permissions

  addgroup build audio
  addgroup build tty
  addgroup build input
  addgroup build kvm
  addgroup build wheel


  # Disable IPv6 for now - seems to be broken in some cases. Can be enabled in rootfs.
  #echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf

  chown root /root

  # Enable a system user to use login:
  # Remove password: -d
  # passwd -u build
}

# Packages for virtualization on the initos verity image.
# 
alpine_add_virt() {

  # For OCI interaction - podman can also pull, for building use dev image.
  apk add runc \
  podman podman-openrc podman-docker fuse-overlayfs \
  buildah  \
  cloud-hypervisor virtiofsd

  # lxc lxc-openrc lxc-templates lxc-templates-oci lxc-download lxc-bridge
  
    # podman instead of docker: no daemon. Adds ~70M

  # Deps: crun container, gpg, etc
  # /var/lib/containers must be a tmpfs or btrfs (not overlayfs)
  # requires fuse-overlayfs
  
  # Buildah is temp until I fix the scripts to use buildah for export
  # lxc - I have one container that uses it, not migrated yet
  # podman-tui

  # About 7M extra - better to let the script download the static version
  # This installs the glibc ch-remote... 
  # virt_install

  # similar to ujail and others - no server.
  # nsjail can listen on a port and start container on connection
  # supports macvlan
  # can act as an init (restart on exit)
  # logs of deps (abseil, protobuf)
  #apk add nsjail
}


# Optional - using alpine kernel instead of debian kernel. This goes to the rootfs, not sidecar.
# Doesn't work well with debian rootfs (module loading issues, different gcc)
# so can't load Nvidia module. Since one of the main goals is to run on servers
# with nvidia cards - not used.
# linux_alpine() {
#   df -h 
#   apk add linux-lts
#   apk add intel-ucode amd-ucode
#   KERNEL_VERSION=$(cat /usr/share/kernel/lts/kernel.release)
#   echo $KERNEL_VERSION > /boot/version
#   Versioned name, matching the modules dir.
#   mv /boot/vmlinuz-lts /boot/vmlinuz-${KERNEL_VERSION}
#   ln -s /boot/vmlinuz-${KERNEL_VERSION}  /boot/vmlinuz

#   # For a VM using alpine kernel: 'linux-virt' package.
#   apk add linux-virt

#   #du -sh /lib/firmware
#   # Decompress all zst files (debian kernel + alpine firmware ?)
#   #(cd /lib/firmware; find . -name "*.zst" -exec zstd -d --rm -f {} \;  || true) 2>/dev/null
#   #echo "Expanded zst"
#   #du -sh /lib/firmware
#   df -h
# }


"$@"
