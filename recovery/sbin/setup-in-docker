#!/bin/sh

# Start a container with mounted volumes.
#
#
# Environment:
#   APP=appname, default to initos
#   REPO - base repository
#   IMAGE - image
#
#   /ws/$APP - the source directory (read only)
#   /work/$APP - the work directory, with /work/$APP/dist for the files to be distributed
#   /run/secrets/$APP - secrets volume
#
# Various cache directories set to files in /work/$APP/cache, etc
#
# For clean build - remove the container and work directory.
# Different builds can run in parallel, with different work dirs and containers.

APP=${APP:-initos}
CONTAINER=${CONTAINER:-$APP}

# Docker repo where we push images or get pre-build/saved images.
REPO=${REPO:-git.h.webinf.info/costin}
IMAGE=${IMAGE:-${REPO}/${APP}:latest}

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=${WORK:-/x/$APP}

SRCDIR=${SRCDIR:-/ws/$APP}

set -x
set -e

# Using 2 modes: dstart is running like a pod, followed by dexec
# This mode is very flexible and also works with pods and VMs.
#
# drun is running an ephemeral container for each command and removes it after.
# It is less flexibile but simpler.



# Source files
VOLS="$VOLS -v ${SRCDIR}:/ws/${APP}"

# APK cache - to avoid downloading files.
VOLS="$VOLS -v ${WORK}/work/cache:/etc/apk/cache"

# Separate volumes - at runtime will also be mounted here.
VOLS="$VOLS -v ${WORK}/modules:/lib/modules"
VOLS="$VOLS -v ${WORK}/boot:/boot"
VOLS="$VOLS -v ${WORK}/firmware:/lib/firmware"

# /x will be the rootfs btrfs, with subvolumes for recovery, root, modules, etc
VOLS="$VOLS -v ${WORK}:/x/${APP}"

# Run a build command in the recovery image
drun() {
  docker run --rm \
    ${VOLS} \
    ${IMAGE} \
     $*
}

drunit() {
  docker run -it --rm \
    ${VOLS} \
    ${IMAGE} \
    $*
}

push() {
  local img=${1:-${IMAGE}}
  docker push  ${img}
}


# Start a docker container for initos.
# It can be started with the real recovery container - or an alpine image,
# which will run the install script to add required packages.
# This can also be a chroot, pod, VM or any equivalent jail/container, with
# volumes mounted on /x and the required places.
start() {
  local img=${1:-${IMAGE}}
  local name=${2:-${CONTAINER}}

  docker run --name ${name} -d \
      ${VOLS} \
      ${img} \
        sleep infinity
}

stop() {
  local name=${1:-${APP}}
  docker stop $name
}


$*
