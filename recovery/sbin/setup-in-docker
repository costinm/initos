#!/bin/sh

# Setup runs other setup scripts in a container.
# Environment:
#   APP=appname, default to initos
#   /ws/$APP - the source directory (read only)
#   /work/$APP - the work directory, with /work/$APP/dist for the files to be distributed
#   /run/secrets/$APP - secrets volume
#
# Various cache directories set to files in /work/$APP/cache, etc
#
# For clean build - remove the container and work directory.
# Different builds can run in parallel, with different work dirs and containers.


# Docker repo where we push images or get pre-build/saved images.
REPO=${REPO:-git.h.webinf.info/costin}

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=${WORK:-/x/vol/initos}

# Dist dir - where the artifacts that need to be copied to the USB are stored.
# In a container it can be $WORK/dist - when running on the host we save files directly
# on the EFI.
DIST=${DIST:-/boot/efi}

# For running the steps that need a container, use this shared dir and source dir.
# Should be mounted in docker, will be created on the USB/recovery.
SRCDIR=${SRCDIR:-/ws/initos}

set -x
set -e

# All d* functions run setup-initos and other commands using docker.
# Using 2 styles: dstart is running like a pod, followed by docker exec
# This mode is very flexible - recovery can run as a pod and generate all the
# artifacts.
#
# drun is running an ephemeral container for each command and removes it after.
# It is less flexibile but simpler.
#
# In both cases, src is mounted as /initos, the host-shared disk as WORK
# and caches mounted in expected places.
#

# Generate recovery.sqfs - on the EFI disk it will be mounted.
# This runs in docker (and anything with d prefix).
recovery() {
  docker rm -f initos-recovery || true

  # Start a container based on alpine:edge, named initos-recovery
  dstart alpine:edge initos-recovery

  # Exec the setup-initos script in the container - install_recovery will add all recovery
  # packages
  docker exec initos-recovery ${SRCDIR}/recovery/sbin/setup-initos install_recovery

  # Label the result - this is the recovery image.
  docker commit initos-recovery ${REPO}/initos-recovery:latest

  # Equivalent:
# For the recovery docker build.
# All other steps are run in a container or chroot.
#export DOCKER_BUILDKIT=1
#  docker build --progress plain \
#    -t ${REPO}/initos-recovery:latest -f ${SRCDIR}/Dockerfile ${SRCDIR}

  # Start a temp container based on the recovery, create a sqwash of the rootfs.
  drun squash_recovery
}

# Generate the entire unsigned USB image.
# Signing may happen on a different machine with access to the private keys.
dbuild_all() {
  dbuild_recovery

  # This takes very long - only do it on a clean build
  # If starting from an Alpine installer, this will be there along with the kernel.
  #
  if [ ! -d ${WORK}/modules ]; then
    drun squash_linux
  fi

  drun efi
}


# Push the recovery/installer/builder image to the repo.
dpush() {
  docker push  ${REPO}/initos-recovery:latest
}

# Run a build command in the recovery image
drun() {
  mkdir -p ${HOME}/.ssh/initos/uefi-keys ${WORK}/cache
  # Inside the host or container - initos files will be under /initos (for now)
  docker run -it --rm \
      -v ${SRCDIR}:/ws/initos \
      -v ${WORK}/cache:/etc/apk/cache \
      -v ${HOME}/.ssh/initos/uefi-keys:/etc/uefi-keys \
      -v ${WORK}/modules:/lib/modules \
      -v ${WORK}/modules/firmware:/lib/firmware \
      -v ${WORK}:/work/initos \
      -v ${WORK}/dist:/boot/efi \
    ${REPO}/initos-recovery:latest /ws/initos/recovery/sbin/setup-initos $*
}

# Start a docker container for initos - recovery or base alpine.
dstart() {
  local img=${1:-${REPO}/initos-recovery:latest}
  local name=${2:-initos-recovery}

  docker run --name ${name} -d \
      -v ${SRCDIR}:/ws/initos \
      -v ${WORK}/cache:/etc/apk/cache \
      -v ${WORK}/modules:/lib/modules \
      -v ${WORK}/modules/firmware:/lib/firmware \
      -v ${WORK}:/work/initos \
      -v ${WORK}/dist:/boot/efi \
      ${img} \
        sleep infinity
}

# Quick function to push the files to a machine with USB (I do most dev is on a VM)
rpush() {
  local host=${1:-host8}

  #ssh ${host} mount /dev/sda1 /boot/efi
  scp  ${WORK}/dist/recovery.sqfs   $host:/boot/efi
  #scp -r ${DIST}/EFI/boot/InitOS-*-signed.EFI   $host:/boot/efi
  scp -r ${WORK}/dist/EFI/  $host:/boot/efi
  #ssh $host umount /boot/efi
}

rpushm() {
  local host=${1:-host8}

  ssh ${host} mount /dev/sda1 /boot/efi
  #scp -r ${DIST}/recovery.sqfs   $host:/boot/efi
  #scp -r ${DIST}/EFI/boot/InitOS-*-signed.EFI   $host:/boot/efi
  scp -r ${DIST}/EFI  $host:/boot/efi
  ssh $host umount /boot/efi
}

rbpush() {
  local host=${1:-host8}

  drun efi

  ssh ${host} mount /dev/sda1 /boot/efi
  #scp -r ${DIST}/recovery.sqfs   $host:/boot/efi
  #scp -r ${DIST}/EFI/boot/InitOS-*-signed.EFI   $host:/boot/efi
  scp -r ${DIST}/EFI  $host:/boot/efi
  ssh $host umount /boot/efi
}

mkdisk() {
  qemu-img create -f raw ${WORK}/disk.img 10G
  dev=$(losetup -f ${WORK}/disk.img --show)
  parted $dev mklabel gpt


}
run_virtiofsd() {
  # Faster than virtio-9p or regular 9p/nfs
  # FUSE messages over vhost-user socket
  # DAX (using host buffers) not enabled.
  ${WORK}/virtiofsd \
      --socket-path=/tmp/virtiofs \
      --shared-dir=$WORK \
      --cache=never \
      --allow-mmap \
      --allow-direct-io \
      --thread-pool-size=2 &

#       --log-level debug \
}

test_vm() {
  if [ ! -f ${WORK}/cloud-hypervisor-static ]; then
    wget https://github.com/cloud-hypervisor/cloud-hypervisor/releases/download/v41.0/cloud-hypervisor-static -O ${WORK}/cloud-hypervisor-static
    wget -L https://gitlab.com/virtio-fs/virtiofsd/-/jobs/artifacts/main/download?job=publish -O ${WORK}/virtiofsd.zip
      chmod +x ${WORK}/cloud-hypervisor-static
  fi

  if [ ! -f ${WORK}/disk.img ] ; then
    mkdisk
  fi

  # Alpine kernel includes no filesystem - virtiofs is a module

  # memory shared needed for fs
  #
  sudo rm /tmp/virtiofs*
  run_virtiofsd
  sleep 1

  ${WORK}/cloud-hypervisor-static \
    --kernel ${WORK}/virt/vmlinuz-virt \
    --initramfs ${WORK}/virt/initramfs \
    --memory size=1G,shared=on \
    --serial tty --console off --cmdline "console=ttyS0 ip=192.168.1.23 trace_clock=global" \
    --disk path=${WORK}/dist/recovery.sqfs path=${WORK}/virt/modloop.sqfs path=${WORK}/disk.img \
    --net tap=vm1,ip=172.17.1.23,mask=255.255.128.0 \
    --fs tag=myfs,socket=/tmp/virtiofs,num_queues=1,queue_size=512

  # mount -t virtiofs  myfs /mnt

}


$*
