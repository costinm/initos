#!/bin/sh

# Start a 'Pod' using the recovery image and initramfs.
#
# Using cloud-hypervisor initially - for more diversity, qemu should also work, crosvm would be ideal if it had binaries.
#
# Using virtiofs.

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
set -x
set -e

if [ -z $VM ]; then
  vmsuffix="${0#*start-vm}"

  if [ -z "$vmsuffix" ]; then
    VM=$(basename $PWD)
  else
    VM=$vmsuffix
  fi
fi

VMDIR=/x/vol/${VM}
WORK=${WORK:-/x/vol/${VM}}
VIRT=${VIRT:-/x/vol/initos/virt}


run_virtiofsd() {
  local dir=${1:-${VMDIR}}

  # Faster than virtio-9p or regular 9p/nfs
  # FUSE messages over vhost-user socket
  # DAX (using host buffers) not enabled.
  ${VIRT}/virtiofsd \
      --socket-path=${VMDIR}/virtiofs.sock \
      --shared-dir=$dir \
      --cache=never \
      --allow-mmap \
      --xattr \
      --allow-direct-io \
      --thread-pool-size=2 &

  # Save the PID
  echo $! > ${VMDIR}/virtiofsd.pid
#       --log-level debug \
}

# Testing:
# Run a command before swaproot, poweroff immediatly after.
# CMD_XTRA=cmdx=/bin/ls setup-vm run # 2.05 sec
#
# Run a command after pivot, poweroff
# setup-vm run "df; poweroff -d 0 -f" # About same

run() {
  local cmd="$1"
  echo "CMD: $cmd"

  # Alpine kernel includes no filesystem - virtiofs is a module

  OPTS=
  CMD_OPT=

  if [ -e ${VMDIR}/rootfs ] ; then
    sudo rm ${VMDIR}/virtiofsd.sock || true
    run_virtiofsd ${VMDIR}/rootfs
    OPTS="$OPTS --fs tag=/dev/root,socket=${VMDIR}/virtiofs.sock,num_queues=1,queue_size=512"
    CMD_OPTS="$CMD_OPTS initos_vrw=1"
  elif [ -e ${VMDIR}/x] ; then
    sudo rm ${VMDIR}/virtiofsd.sock || true
    run_virtiofsd ${VMDIR}/x
    OPTS="$OPTS --fs tag=/dev/root,socket=${VMDIR}/virtiofs.sock,num_queues=1,queue_size=512"
    CMD_OPTS="$CMD_OPTS initos_vx=1"
  fi

  KERNEL_VERSION=$(cat ${VIRT}/version)
  
  DISKS="$DISKS path=${VIRT}/modules-${KERNEL_VERSION}.sqfs"
  
  if [  -f ${VMDIR}/disk.img ] ; then
      DISKS="$DISKS path=${VMDIR}/disk.img"
  fi
  if [  -f ${VMDIR}/disk2.img ] ; then
      DISKS="$DISKS path=${VMDIR}/disk2.img"
  fi

  # Debian kernel doesn't seem to work with hvc0, serial is fine
  OPTS="$OPTS --serial tty --console off"

  OPTS="$OPTS --kernel ${VIRT}/vmlinuz-${KERNEL_VERSION}"
  OPTS="$OPTS --memory size=8G,shared=on --cpus boot=6"

  #OPTS="$OPTS --serial socket=${VMDIR}/serial.sock --console off"

  # --serial tty --console off --cmdline "console=ttyS0" results in ttyS0 as the console
  # Otherwise the virtio-console driver is used - faster but less early messages

  # virtio-net is used for eth
  # tap is the address of the tap on the VM side

  #  --vsock \
  #  --pmem file=${WORK}/boot/efi/recovery.sqfs \

  # Adding ip=172.17.1.22 to kernel cmdline adds 10 sec delay
  # noquiet debug loglevel=8 ignore_loglevel

  # --serial tty --console off --cmdline "console=ttyS0 trace_clock=global quiet" \
  sudo rm -f ${VMDIR}/ch.sock
  sudo rm -f ${VMDIR}/serial.sock

  sudo time cloud-hypervisor \
    --pvpanic \
    --rng src=/dev/urandom \
    --api-socket=${VMDIR}/ch.sock \
    --cmdline "${CMD_OPTS} console=hvc0 console=ttyS0 trace_clock=global net.ifnames=0  panic=-1 reboot=acpi quiet initos.ip=172.17.1.24 ${CMD_XTRA} --${cmd}" \
    --disk ${DISKS} \
    --net tap=vm-$VM,ip=172.17.1.23,mask=255.255.128.0,iommu=on \
    --initramfs ${VIRT}/initramfs-${KERNEL_VERSION} \
    $OPTS 

  brctl addif br-lan vm-$VM
   # --net .. mac=...
    #--fs tag=/dev/root,socket=$PWD/virtiofs-rootfs.sock \
    #--cmdline "console=hvc0 rootfstype=virtiofs root=/dev/root ro debug" \
    #systemd.unit=rescue.target systemd.debug-shell=1 systemd.log_level=debug


  # exit with openrc-shutdown -p 0
  # or poweroff -d 0 -f

  # mount -t virtiofs /dev/root /mnt

}

mkdisk() {
  mkdir -p ${VMDIR}
  qemu-img create -f raw ${VMDIR}/disk.img 10G
  #dev=$(losetup -f ${VMDIR}/disk.img --show)
  mkfs.btrfs ${VMDIR}/disk.img
  #parted $dev mklabel gpt
}

stop() {
  ch-remote --api-socket=${VMDIR}/ch.sock shutdown-vmm
}

CMD=$1
shift
$CMD "$*"
