#!/bin/sh

# Start a docker container, with a set of mounted volumes for development, build 
# or to run services.
# 
# This is an 'opinionated' wrapper:
# - containers in /x/vol/NAME
# - a simpler config - start.env, /x/initos/conf/start.env
# - if ./rootfs/ is present - ???
# 
# Environment:
#   NAME - pod name - defaults to working directory basename.
#   TAG - defaults to 'latest'
#   REPO - base repository, NAME:TAG will be added
#   IMAGE - final image, defaults to REPO/NAME:TAG
#
# Directory layout outside the container:
#    WORK ( defaults to /x/vol/$NAME )
#    SRCDIR - /ws/$NAME - source directory
# 
# Directory layout inside the container:
#   /ws/$APP - the source directory (read only)
#   /work/$APP - the work directory, with /work/$APP/dist for the files to be distributed
#   /run/secrets/$APP - secrets volume
#
# Various cache directories set to files in /work/$APP/cache, etc
#
# For clean build - remove the container and work directory.
# Different builds can run in parallel, with different work dirs and containers.
#
# Using 2 modes: start is running like a pod, followed by exec
# or 'run'. This mode is very flexible and also works with 
# pods and VMs.
#
# drun is running an ephemeral container for each command.
# (removes it after).
# It is less flexibile but simpler.


NAME=${NAME:-$(basename $PWD)}

TAG=${TAG:-latest}
APP=${APP:-${NAME}}

# Name of the OCI container
POD=${POD:-$NAME}


# Docker repo where we push images or get pre-build/saved images.
REPO=${REPO:-git.h.webinf.info/costin}
IMAGE=${IMAGE:-${REPO}/${APP}:latest}

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=${WORK:-/x/vol/${APP}}

mkdir -p ${WORK}/work/cache:${WORK}/work/apkcache
SRCDIR=${SRCDIR:-/ws/${APP}}

set -x
set -e

# Source files
VOLS="$VOLS -v ${SRCDIR}:/ws/${APP}"

# APK cache - to avoid downloading files.
VOLS="$VOLS -v ${WORK}/work/apkcache:/etc/apk/cache"
VOLS="$VOLS -v ${WORK}/work/cache:/var/lib/cache"

# Separate volumes - at runtime will also be mounted here.
#VOLS="$VOLS -v ${WORK}/modules:/lib/modules"
#VOLS="$VOLS -v ${WORK}/boot:/boot"
#VOLS="$VOLS -v ${WORK}/firmware:/lib/firmware"

# /x will be the rootfs btrfs, with subvolumes for recovery, root, modules, etc
VOLS="$VOLS -v ${WORK}:/x/${APP}"
#DOCKER_OPTS="--net br-lan"

# Will run podman, with files in HOME/.local/share/containers
# vfs-layers contains tgz layers (tar-split.gz)
# 
# Useful commands:
# - images, containers
# - inspect ${POD}, --type=image 
# - info - runtime (runc), dirs
# - commit - create OCI image
# - config (--cmd, entrypoint), manifest - image config
# - from, copy, run, rm
# - mount - mount container to dir
# - login, pull, push, tag
# - push docker-daemon:...
# 
# Less useful:
# - add - use copy instead
# - build - what's the point (Dockerfile)
# - rename, rmi, source(?)
# - unshare: after unshare buildah mount works for user
BUILDAH=1

# 'from' and 'start' will start a container with a set of mounts.
# 
from() {
  start $*
}

# TODO: all output should go to /work insted of /x/initos

start() {
  img=${1}
  if [ -n ${BUILDAH} ]; then
    buildah --name ${POD} \
      -v `pwd`:/ws/initos \
      -v ${WORK}:/x/initos from ${img}
  else
    docker run $DOCKER_OPTS --name ${POD} -d \
      ${VOLS} \
      ${IMAGE} \
        sleep infinity
  fi 
}

stop() {
  local n=${1:-${NAME}}
  docker stop $n
}

# Run a single command in a container.
run() {
  local n=${1}
  shift
  if [ -n ${BUILDAH} ]; then
    buildah run ${n} -- $*
  else
    docker run $DOCKER_OPTS --rm \
      ${VOLS} \
      ${IMAGE} \
      $*
  fi
}

copy() {
  local n=${1}
  shift
  if [ -n ${BUILDAH} ]; then
    buildah copy ${n} $*
  else
    docker cp $1 ${n}:$2
  fi
}

commit() {
  buildah commit $*
}

# Get a shell in the container.
sh() {
  local n=${1:-${POD}}
  shift
  if [ -n ${BUILDAH} ]; then
    buildah run -t ${n} -- $*
  else
    docker run $DOCKER_OPTS -it --rm \
    ${VOLS} \
    ${IMAGE} \
    /bin/sh $*
  fi
  # -c 'a; b; c'
}

push() {
  local img=${1:-${IMAGE}}
}



podman_recovery() {
  # if running on recovery
  mount -t tmpfs /var/lib/containers

  #crane pull --format oci git.h.webinf.info/costin/initos-recovery:latest /tmp/r
  podman run $DOCKER_OPTS --privileged -it --net host \
     git.h.webinf.info/costin/initos-recovery:latest /bin/sh
}

# Creating squashfs files from OCI images
# Creating the recovery is a bit more complicated with docker - there are few ways:
# - use crane, if the image is pushed.
# - start a temp image, docker export
recovery_sqfs_crane() {
  local img=$1
  local out=$2

  mkdir -p ${WORK}/boot/efi
  rm -f ${WORK}/boot/efi/${out}.sqfs

  crane export  ${img} | sqfstar ${WORK}/boot/efi/${out}.sqfs -e .dockerenv
  veritysetup format --root-hash-file=/boot/efi/hash.${out} /boot/efi/${out}.sqfs /boot/efi/${out}.sqfs.verity
}

# Use as a pipe - with docker export ... | setup-oci recovery_sqfs_docker_export
recovery_sqfs_docker_export() {
  local out=recovery

  mkdir -p /boot/efi
  rm -f /boot/efi/recovery.sqfs

  # Read all stdin
  #cat ${WORK}/work/recovery.tar |
  sqfstar /boot/efi/recovery.sqfs -e .dockerenv

  veritysetup format --root-hash-file=/boot/efi/hash.${out} /boot/efi/${out}.sqfs /boot/efi/${out}.sqfs.verity
}

# recovery_sqfs() {
#   docker rm -f initos-tmp
#   docker run --name initos-tmp ${IMAGE} echo

#   mkdir -p ${OUT}/boot/efi
#   rm -f ${OUT}/boot/efi/recovery.sqfs

#   docker export initos-tmp | docker run -i \
#     -v ${OUT}/boot/efi:/boot/efi \
#     -v ${SRCDIR}:/ws/initos \
#      --rm ${IMAGE} /sbin/setup-initos recovery_sqfs_docker_export

#   docker stop initos-tmp
#   docker rm initos-tmp
# }

export_recovery() {
  if [ -f ${OUT}/recovery/bin/busybox ]; then
    sudo rm -rf /x/initos/recovery/*
  fi
  if [ ! -d ${OUT}/recovery ]; then
    btrfs subvolume create ${OUT}/recovery || mkdir -p ${OUT}/recovery
  fi
  docker export initos-recovery | sudo tar -C ${OUT}/recovery -xf -
}


$*
