#!/bin/sh

# Build script for initos. The functions are called typically called in a docker container - but should work
# on any VM that has the right tools.
#
# The results:
# - creating a 'base-recovery' image, that can be run in Docker in a trusted machine to generate signed
# artifacts including bootstrap ssh authorized keys and user-specific roots of trust.
#
# - creation of a directory containing all artifacts needed for install by copying to an existing
# USB EFI partition.
#

set -x
set -e

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=${WORK:-/x/initos}

# For running the steps that need a container, use this shared dir and source dir.
# Should be mounted in docker, will be created on the USB/recovery.
SRCDIR=${SRCDIR:-/ws/initos}

mkdir -p ${WORK}/img ${WORK}/efi/EFI/BOOT ${WORK}/usb/EFI/BOOT

# vinit updates the initramfs for the virt kernel
vinit() {
  VER=${1:-$(cat /boot/version-virt)}
  if [ -z ${VER} ]; then
    return
  fi

  mkinitfs -k  -i /sbin/init-vm \
     -F "base btrfs squashfs virtio initos" \
     -o /x/initos/virt/initramfs-${VER} ${VER}
  
  cp /boot/vmlinuz-${VER} /x/initos/virt
}

build_initrd() {
  local KERNEL_VERSION=$1
  local img=$2

  echo "Built initramfs ${img} for ${KERNEL_VERSION}"

  local KERNEL=/boot/vmlinuz-${KERNEL_VERSION}
  [ ! -f ${KERNEL} ] && echo "Missing kernel ${KERNEL}" && return

  [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ] && echo "Missing modules" && return

    # Uses mkinitfs.conf added from file in the docker image.
    # Other options: virtio, squashfs, 9p, raid, cdrom, lvm, ext4, kms (video)

    # -k - keep the file
    # -t - temp dir where all is stored
    # -i - what init file to use - replace default with our script.
    #rm -rf ${WORK}/initrd
    # -k -t ${WORK}/initrd

    echo "features=\"ata base btrfs keymap mmc nvme scsi usb cryptsetup squashfs tpm2 clevis initos eudev\"" > /etc/mkinitfs/mkinitfs.conf
    cp /etc/passwd /usr/share/mkinitfs/passwd
    cp /etc/group /usr/share/mkinitfs/group

    #rm -rf ${WORK}/initfs.host
    # -t ${WORK}/initfs.host
    mkinitfs -k  -i /sbin/init-usb -o ${img}  $KERNEL_VERSION
}

# Generate an unsigned efi image, based on alpine with a custom init script.
# alpine_initrd is run in an alpine container, rescue or chroot.
#
# The init image will be generated in /boot/initramfs.
# Modules are expected to be in /lib/modules/modules-KERNEL_VERSION
# Kernel is expected to be in /boot/vmlinux-KERNEL_VERSION
#
# For secure mode, kernel+initrd+cmdline are signed, but the rootfs needs to
# be either signed or on a LUKS partition ( where encryption+signing happens as well).
#
# In the first case, normally the SHA of the rootfs needs to be passed as an argument
# either in kernel cmdline or as a file in initrd.
#
# The '@firmware' and '@modules' subvolumes must also be created
# if using separate volumes - for now they're in @recovery rootfs.

efi() {
  # Expects that the modloop is already created, and the cache under ${WORK}/modules may
  # exist.
  mkdir -p ${WORK}/boot

  # For each kernel we have a module for, create an EFI image
  for KERNEL_VERSION in $(ls /lib/modules) ; do
    KERNEL=/boot/vmlinuz-${KERNEL_VERSION}
    [ ! -f ${KERNEL} ] && echo "Missing kernel ${KERNEL}" && continue

    [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ] && echo "Missing modules for $KERNEL_VERSION" && continue

    local img=${WORK}/boot/initos-${KERNEL_VERSION}.img

    build_initrd ${KERNEL_VERSION} ${img}

    echo "loglevel=6 console=ttyS0 console=tty1 net.ifnames=0 panic=5 debug_init iomem=relaxed" > /boot/cmdline

    efi-mkuki \
      -c /boot/cmdline \
      -o ${WORK}/boot/InitOS-${KERNEL_VERSION}.EFI \
        ${KERNEL} /boot/intel-ucode.img /boot/amd-ucode.img ${img}
  done
}

# Generate the key pairs for signing the kernel and the disk image.
# This is done before install - as a separate step/process - the rest can be automated easily,
# but signing must be done on a secure machine and is specific to each user.
sign_init() {
  local u=${DOMAIN:-webinf.info}

  efi-mkkeys -s ${u} -o /etc/uefi-keys
    
  openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:P-256 \
     -out /etc/uefi-keys/root.key
  openssl ec -in /etc/uefi-keys/root.key -pubout -out \
     /etc/uefi-keys/root.pem
  ssh-keygen -y -f /etc/uefi-keys/root.key > \
     /etc/uefi-keys/authorized_keys
}

# sign creates a signed UKI.
# The initramfs is different - the additional file will disable shell and trigger verification.
sign() {
  set -e
  DEST=${DEST:-${WORK}}

  # Alpine expects keys on /etc/uefi-keys/{db.crt,db.key}
  if [ ! -f /etc/uefi-keys/db.crt ]; then
    sign_init
  fi

  mkdir -p ${DEST}/usb/EFI/BOOT/ ${DEST}/efi/EFI/BOOT \
     ${DEST}/efi/KEYS

  cp /etc/uefi-keys/*.auth ${DEST}/efi/KEYS
  cp /etc/uefi-keys/*.crt ${DEST}/efi/KEYS
  cp /etc/uefi-keys/*.cer ${DEST}/efi/KEYS

  cp /etc/uefi-keys/authorized_keys /boot/

  # The hash must be on the signed initrd - not on the efi disk (which is mounted)
  cp /x/initos/img/hash* /boot/
  cp /etc/uefi-keys/root.pem /boot/

  chmod -R 755 ${DEST}/efi/KEYS

  # For each hashfile, compute the signture
  for hashfile in /boot/hash*; do
    sigfile=${hashfile}.sig
    cat $hashfile | xxd -r -p | openssl dgst \
      -sha256 -sign /etc/uefi-keys/root.key \
      -out root_hash.sig
  done

  cp /opt/initos/bin/init* /sbin/

  (find /boot/hash* \
        /boot/root.pem \
        /sbin/init* \
        /boot/authorized_keys \
   | sort \
   | cpio --quiet --renumber-inodes -o -H newc \
   | gzip) > /tmp/initos-hashes.cpio.gz

  # TODO: add authorized_keys and root.pem
  echo "loglevel=6 console=ttyS0 console=tty1 net.ifnames=0 panic=5 debug_init rdinit=/sbin/init-usb iomem=relaxed" > /boot/cmdline
  echo "loglevel=0 quiet console=ttyS0 console=tty1 net.ifnames=0 panic=5 rdinit=/sbin/init-secure initos.secure" > /boot/cmdline.secure

  # for each initrd
  #for k in $(ls /boot/vmlinuz-*) ; do
    #KERNEL_VERSION=${k##*vmlinuz-}
    KERNEL_VERSION=$(cat /x/initos/boot/version)
    KERNEL=/boot/vmlinuz-${KERNEL_VERSION}
    # [ -f /boot/initos/initrd-${KERNEL_VERSION}.img ] || continue

    efi-mkuki \
        -c /boot/cmdline \
        -o ${WORK}/usb/EFI/BOOT/BOOTx64.EFI \
          ${KERNEL} \
          /boot/intel-ucode.img /boot/amd-ucode.img \
          /x/initos/boot/initos-${KERNEL_VERSION}.img \
          /tmp/initos-hashes.cpio.gz

    efi-mkuki \
      -c /boot/cmdline.secure \
      -o /tmp/${KERNEL_VERSION}.EFI \
        ${KERNEL} \
        /boot/intel-ucode.img /boot/amd-ucode.img \
        /x/initos/boot/initos-${KERNEL_VERSION}.img \
        /tmp/initos-hashes.cpio.gz

    sbsign --cert /etc/uefi-keys/db.crt \
      --key /etc/uefi-keys/db.key \
      --output /x/initos/efi/EFI/BOOT/BOOTx64.EFI \
      /tmp/${KERNEL_VERSION}.EFI

    rm /tmp/${KERNEL_VERSION}.EFI
    echo Signed: $KERNEL_VERSION

  chmod -R 755 /x/initos
  #done
}

# Create module sqfs files for all available modules
mods_sqfs() {
  for version in $(ls /lib/modules) ; do
    mod_sqfs $version
  done
}

# firmware_sqfs builds /efi/firmware.sqfs using /x/initos/firmware or /lib/firmware
firmware_sqfs() {

  if [ -f /x/initos/img/firmware.sqfs ]; then
    echo "Firmware already exists"
    return
  fi

  if [ -d /lib/firmware ]; then
    cd /lib/firmware
  else
    echo "No firmware found"
    return
  fi

  mksquashfs . /x/initos/img/firmware.sqfs
  veritysetup format \
    --root-hash-file=/x/initos/img/hash.firmware \
    /x/initos/img/firmware.sqfs \
    /x/initos/img/firmware.sqfs.verity
}

# mod_sqfs builds /efi/modules-${version}.sqfs
# Source should be in /x/initos/modules/${version} or /lib/modules/${version}
mod_sqfs() {
  ver=${1:-$(cat /boot/version)}
  DST=${2:-/x/initos/img}

  if [ -f /x/initos/img/modules-${ver}.sqfs ]; then
    echo "Modules already exist for ${ver}"
    return
  fi

  if [ -z "$ver" ]; then
    echo "No version specified"
    return
  fi

  if [ -d ${WORK}/modules/${ver} ]; then
    cd ${WORK}/modules/${ver}
  elif [ -d /lib/modules/${ver} ]; then
    cd /lib/modules/${ver}
  else
    echo "No modules found for ${ver}"
    return
  fi

  mksquashfs . ${DST}/modules-${ver}.sqfs
  veritysetup format \
     --root-hash-file=${DST}/hash.modules-${ver} \
     ${DST}/modules-${ver}.sqfs \
     ${DST}/modules-${ver}.sqfs.verity
}

recovery_sqfs() {
  # -one-file-system also works on the host - but not so well in a container.
  cd /
  if [ -f /x/initos/img/recovery.sqfs ]; then 
    echo "Recovery already exists - remove output dir for clean build"
    return
  fi
  mksquashfs . /x/initos/img/recovery.sqfs -regex \
     -e "x/.*" \
     -e ".dockerenv" \
     -e "lib/modules/.*" \
     -e "lib/firmware/.*" \
     -e "boot/.*" \
     -e "proc/.*" -e "sys/.*" -e "run/.*" \
     -e "work/.*" -e "ws/.*" -e "etc/apk/cache.*"

  veritysetup format \
    --root-hash-file=/x/initos/img/hash.recovery \
    /x/initos/img/recovery.sqfs \
    /x/initos/img/recovery.sqfs.verity
}

# Create the BOOT disk files. 
dist() {
  recovery_sqfs
  firmware_sqfs 

  mkdir -p /x/initos/boot

  vvirt=$(cat /boot/version-virt)
  if [ -n ${vvirt} ]; then
    vinit ${vvirt}
    if [ ! -f /x/initios/img/modules-${vvirt}.sqfs ]; then
      mod_sqfs ${vvirt} /x/initos/img
    fi 
  fi

  # Create the initrd and copy the boot files
  ver=${1:-$(cat /boot/version)}
  if [ -z ${ver} ]; then
    ver=$(ls /lib/modules)
    echo -n ${ver} > /boot/version
  fi
  mod_sqfs ${ver} 
    
  if [ ! -f /x/initos/boot/initos-${ver}.img ]; then
    build_initrd ${ver} /boot/initos-${ver}.img
    cp /boot/initos-${ver}.img /x/initos/boot/initos-${ver}.img
  fi

  mkdir -p /x/initos/boot/
  cp -r /boot/* /x/initos/boot/
}

chk_firmware() {
  set +x
  # Get a list of all loaded modules - mostly AI generated.
  modules=$(lsmod | awk 'NR>1 {print $1}')

  for module in $modules; do
    modinfo_output=$(/usr/sbin/modinfo $module)

    # Extract firmware information
    #firmware_lines=$(echo "$modinfo_output" | grep -i 'firmware:')
    firmware_lines=$(echo "$modinfo_output" | grep -ioE 'firmware:[[:space:]][^ ]+' | cut -d ' ' -f2-)

    if [ -n "$firmware_lines" ]; then
      echo $module
      while read -r firmware; do
          echo "$module: $firmware"
      done < "$firmware_lines"
    fi
  done
}

alpine_clear() {
  rm /var/lib/dbus/machine-id || true
  rm /etc/hostname || true
  echo "" > /etc/machine-id || true
}


# Add the Alpine ISO image to the boot disk (expanded to EFI instead of ISO)
# This is useful for recovery if recovery fails. 
efi_alpine_installer() {
  set -e
  mkdir -p ${DIST} ${WORK}/boot

    if [ ! -f ${WORK}/alpine.iso ]; then
      curl -Lo ${WORK}/alpine.iso https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-standard-3.20.3-x86_64.iso
    fi
    cd ${WORK}/dist
    bsdtar xf ${WORK}/alpine.iso
    cfgf=$(ls ${DIST}/boot/config-*)

}


$*
