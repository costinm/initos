#!/bin/sh

# Build script for initos. The functions are called typically called in a docker container - but should work
# on any VM that has the right tools.
#
# The results:
# - creating a 'base-recovery' image, that can be run in Docker in a trusted machine to generate signed
# artifacts including bootstrap ssh authorized keys and user-specific roots of trust.
#
# - creation of a directory containing all artifacts needed for install by copying to an existing
# USB EFI partition.
#

set -x
set -e

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=/work/initos

# Dist dir - where the artifacts that need to be copied to the USB are stored.
# In a container it can be $WORK/dist - when running on the host we save files directly
# on the EFI.
DIST=${DIST:-$WORK/dist}

# For running the steps that need a container, use this shared dir and source dir.
# Should be mounted in docker, will be created on the USB/recovery.
SRCDIR=${SRCDIR:-/ws/initos}

## All functions after this line are run inside a container, chroot or host running
# 'recovery' or alpine installer or distro.


# Squash_linux will get the linux and firmware, create squashfs files and copies of
# the files needed for EFI.
#
# Will use the same layout as an alpine ISO.
#
# See the Dockerfile.debian for an example of creating a debian-based kernel.
# This is using alpine kernel corresponding to the base.
squash_linux() {
  # Set shell to exit on error
  set -e

  if [ -f ${DIST}/boot/modloop-lts ]; then
    echo "Detecting existing squashed modules - using Alpine dist or other dist"

    KERNEL_VERSION=$(ls ${DIST}/boot/config* | sed -e 's,/boot/config-,,')
    if [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ]; then
      unsquashfs -f -d ${WORK} ${DIST}/boot/modloop-lts
      echo "Expanding modules $(ls /lib/modules/${KERNEL_VERSION})"
      chmod -R 755 /lib/modules/
    fi

    return
  fi

  # Create the modloop-tls
  apk add linux-lts

  KERNEL_VERSION=$(ls ${DIST}/boot/config* | sed -e 's,/boot/config-,,')

  rm -f ${DIST}/boot/modloop-lts
  mksquashfs /lib/firmware /lib/modules/${KERNEL_VERSION} ${DIST}/boot/modloop-lts

  cp /boot/vmlinuz-lts ${DIST}/boot/vmlinuz-lts
  cp /boot/config-* ${DIST}/boot/
  cp /boot/System.map-* ${DIST}/boot/
}

# Very slow, installs a lot of firmware
squash_linux_alpine() {
  apk add linux-lts
  # /boot on the container will have the files - copy them to the dist dir, in same
  # layout as the alpine
  # /lib/modules, /lib/firmware are mounted to the work dir when running in container (cached)

  KERNEL_VERSION=$(ls /boot/config* | sed -e 's,/boot/config-,,')

  rm -f $DIST/boot-edge/modloop-lts
  mkdir -p $DIST/boot-edge
  mksquashfs /lib/firmware /lib/modules/${KERNEL_VERSION} $DIST/boot-edge/modloop-lts

  cp /boot/vmlinuz-lts ${DIST}/boot-edge/vmlinuz-lts
  cp /boot/config-* ${DIST}/boot-edge/
  cp /boot/System.map-* ${DIST}/boot-edge/
}

# Generate an unsigned efi image, based on alpine with a custom init script.
# alpine_initrd is run in an alpine container, rescue or chroot.
#
# The init image will be generated in /boot/initramfs.
# Modules are expected to be in /lib/modules/modules-KERNEL_VERSION
# Kernel is expected to be in /boot/vmlinux-KERNEL_VERSION
#
# For secure mode, kernel+initrd+cmdline are signed, but the rootfs needs to
# be either signed or on a LUKS partition ( where encryption+signing happens as well).
#
# In the first case, normally the SHA of the rootfs needs to be passed as an argument
# either in kernel cmdline or as a file in initrd.
#
# The '@firmware' and '@modules' subvolumes must also be created
# if using separate volumes - for now they're in @recovery rootfs.
efi() {
  mkdir -p ${DIST}

  # Expects that the modloop is already created, and the cache under ${WORK}/modules may
  # exist.

  local cfgf=$(ls ${DIST}/boot-edge/config-*)

  if [ -z ${cfgf} ] ; then
    echo "Missing kernel config" &&  return
  fi
  local cfg=$(basename $cfgf)

  KERNEL_VERSION=${cfg#config-}

  KERNEL=${DIST}/boot-edge/vmlinuz-lts

  [ -z ${KERNEL_VERSION} ] && echo "Missing kernel config" && return
  [ ! -f ${KERNEL} ] && echo "Missing kernel ${KERNEL}" && return
  [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ] && echo "Missing modules - run squash_linux first" && return

  # Uses mkinitfs.conf added from file in the docker image.
  # Other options: virtio, squashfs, 9p, raid, cdrom, lvm, ext4, kms (video)

  # -k - keep the file
  # -t - temp dir where all is stored
  # -i - what init file to use - replace default with our script.
  #rm -rf ${WORK}/initrd
  # -k -t ${WORK}/initrd
  local img=${WORK}/initramfs

  cat /etc/mkinitfs/mkinitfs.conf

  mkinitfs  -i $SRCDIR/initramfs/init -o ${img} $KERNEL_VERSION

  echo "Built initramfs ${img} for ${KERNEL_VERSION}"

  echo "loglevel=6 console=ttyS0 console=tty1 net.ifnames=1 panic=5 debug_init iomem=relaxed" > /tmp/cmdline
  efi-mkuki \
    -c /tmp/cmdline \
    -o ${DIST}/EFI/BOOT/InitOS-${KERNEL_VERSION}.EFI \
      ${KERNEL} /boot/intel-ucode.img /boot/amd-ucode.img ${img}

  # Alpine expects keys on /etc/uefi-keys/{db.crt,db.key}
  if [ -f /etc/uefi-keys/db.crt ]; then
    sign ${KERNEL_VERSION}
    echo "Signed EFI"
    rm ${DIST}/EFI/BOOT/InitOS-${KERNEL_VERSION}.EFI
  fi

#  # for virt - different model, kernel separate, modules in qcow, no initrd.
}

# Use the Alpine ISO image as a base - instead of downloading or building
# firmware or modules.
# efi_patch will use an apline ISO, and patch the initrd with the custom init script.
# Alpine is expected to be in ${WORK}/dist/boot (dist is the content of the EFI/iso disk)
efi_alpine_installer() {
  set -e
  mkdir -p ${DIST} ${WORK}/boot

  # Expects that the modloop is already created, and the cache under ${WORK}/modules may
  # exist.

  local cfgf=$(ls ${DIST}/boot/config-*)

  if [ -z ${cfgf} ] ; then
    if [ ! -f ${WORK}/alpine.iso ]; then
      curl -Lo ${WORK}/alpine.iso https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-standard-3.20.3-x86_64.iso
    fi
    cd ${WORK}/dist
    bsdtar xf ${WORK}/alpine.iso
    cfgf=$(ls ${DIST}/boot/config-*)
  fi

  local cfg=$(basename $cfgf)

  KERNEL_VERSION=${cfg#config-}

  KERNEL=${DIST}/boot/vmlinuz-lts

  [ -z ${KERNEL_VERSION} ] && echo "Missing kernel config" && return
  [ ! -f ${KERNEL} ] && echo "Missing kernel ${KERNEL}" && return

  if [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ]; then
      unsquashfs -f -d ${WORK} ${DIST}/boot/modloop-lts
      echo "Expanding modules $(ls /lib/modules/${KERNEL_VERSION})"
      chmod -R 755 /lib/modules/
  fi
  [ ! -f /lib/modules/${KERNEL_VERSION}/modules.dep ] && echo "Missing modules - run squash_linux first" && return

  cp /ws/initos/initramfs/init /init
  echo "MODE=dev" > /etc/initos.conf
  (find /init /etc/initos.conf | sort | cpio --quiet --renumber-inodes -o -H newc | gzip) > ${WORK}/initos-xtra.cpio.gz

  echo "Built initramfs ${img} for ${KERNEL_VERSION}"

  echo "loglevel=6 console=ttyS0 console=tty1 net.ifnames=1 panic=5 debug_init iomem=relaxed modules=loop,squashfs,sd-mod,usb-storage" > /tmp/cmdline

  efi-mkuki \
    -c /tmp/cmdline \
    -o ${DIST}/EFI/BOOT/Alpine-${KERNEL_VERSION}.EFI \
      ${KERNEL}  ${DIST}/boot/initramfs-lts ${WORK}/initos-xtra.cpio.gz
}

sign() {
  local KERNEL_VERSION=${1}

  sbsign --cert /etc/uefi-keys/db.crt --key /etc/uefi-keys/db.key \
    --output ${DIST}/EFI/BOOT/InitOS-${KERNEL_VERSION}-signed.EFI \
    ${DIST}/EFI/BOOT/InitOS-${KERNEL_VERSION}.EFI

  cp /etc/uefi-keys/*.auth ${DIST}/EFI
  chmod 777 ${DIST}/EFI/*.auth

  # TODO: also sign the squash and modules
}

# Recovery is roughly the same with an install of alpine, with ssh and tools installed,
# and the overlay added.
# Should not contain any user specific data or public keys.
# When building the signed EFI and init - the user keys and public settings may be added.
# Any private data needs to be in the LUKS partition.
squash_recovery() {
  # -one-file-system also works on the host - but not so well in a container.
  cd /
  rm -f ${DIST}/recovery.sqfs
  mksquashfs  . ${DIST}/recovery.sqfs \
    -regex -e "x/.*" -e "lib/modules/.*" -e "lib/firmware/.*" -e "boot/.*" \
     -e "proc/.*" -e "sys/.*" -e "run/.*"
}


# Generate the key pairs for signing the kernel and the disk image.
# This is done before install - as a separate step/process - the rest can be automated easily,
# but signing must be done on a secure machine and is specific to each user.
sign_init() {
  local u=${1:-h.webinf.info}

  mkdir -p /x/secure
  efi-mkkeys -s h.webinf.info
}

# Sign a disk image using the public key. The public key is also used to sign
# the kernel, and is included in the init image.
sign_image() {
  local img=$1

  local hash_file="${img}.sha256"
  local sig_file="${img}.sig"
  local private_key="/var/run/secrets/signing.key"

  # Calculate the SHA256 hash of the image
  sha256sum "$img" | awk '{print $1}' > "$hash_file"

  # Sign the hash using the private key
  openssl dgst -sha256 -sign "$private_key" -out "$sig_file" "$hash_file"

  echo "Image signed successfully. Signature saved to $sig_file"
}

### Alpine specific packages for the recovery image.
# Not using "--no-cache" - and installing one by one.
# When running in docker, this will be cached to /var/cache/apk/[INDEX] - which is a mounted dir.
# /etc/apk/cache will cache the actual files

install_recovery() {
  mkdir -p /initos
  cp -a ${SRCDIR}/bin/* /usr/bin/
  cp -a ${SRCDIR}/etc/* /etc/

  alpine_add_common
  alpine_add_base
  alpine_add_recovery
}

alpine_add_common() {
    apk -U --no-progress update

    apk add alpine-base alpine-conf
    apk add openrc

    apk add busybox-mdev busybox-mdev-openrc busybox-suid busybox-binsh
    apk add iw ifupdown-ng ifupdown-ng-wifi
    apk add ca-certificates-bundle
    apk add mdev-conf
    # Using it for few things - minisign can probably be used instead.
    # 765k bin + 5M lib
    apk add openssl
    apk add ssl_client wpa_supplicant wpa_supplicant-openrc

    rc-update add devfs sysinit
    rc-update add dmesg sysinit
    rc-update add mdev sysinit
    rc-update add hwdrivers sysinit
    rc-update add modloop sysinit

    rc-update add modules boot
    rc-update add sysctl boot
    rc-update add hostname boot
    rc-update add bootmisc boot
    rc-update add syslog boot
    rc-update add hwclock boot

    rc-update add mount-ro shutdown
    rc-update add killprocs shutdown
    rc-update add savecache shutdown

}

# If starting with an alpine distro, add the packages we need.
alpine_add_recovery() {
  apk update

  apk add rsync
  
  apk add busybox-openrc

  apk add dropbear dropbear-openrc
  # fsverity CLI
  #apk add fsverity-utils

  # To build the UKI
  apk add binutils

  apk add tpm2-tools tpm2-tss-tcti-device tpm2-tss-tcti-cmd tpm2-tss
  
  apk add lsblk

  # sgdisk gptfdisk
  apk add  parted

  apk add cryptsetup uuidgen

  # 400k
  apk add minisign

  apk add btrfs-progs

  apk add mkinitfs
  echo 'disable_trigger=yes' >> /etc/mkinitfs/mkinitfs.conf

  # 104 packages, 1.1G under lib/firmware
  # /lib/modules, /boot/vmlinuz-lts (plus config, system map)
  apk add gummiboot intel-ucode amd-ucode

  apk add efibootmgr

  apk add squashfs-tools

  # troubleshooting
  #apk add pcituils

  apk add efi-mkuki
  apk add sbsigntool

  apk add openssh-sftp-server

  apk add curl

  apk add dmidecode

  # fsck, etc
  apk add dosfstools

  apk add wpa_supplicant wpa_supplicant-openrc

  # from karios - not sure we need it
  apk add eudev eudev-hwids \
    findutils findmnt \
    htop haveged \
    iproute2 \
    irqbalance \
    lm-sensors \
    lsscsi \
    lvm2 \
    mdadm \
    smartmontools \
    sudo strace util-linux bridge 

  #apk add secureboot-hook

  # Others that may be useful but not required:

  # apk add kmod lddtree mdev-conf kmod-libs
  #  apk add iproute2 tcpdump procps

  # Instead of busybox mdevd
  #apk add mdevd mdevd-openrc

  # For OCI interaction
  #apk add crane
  # Can also encrypt/decrypt - 3.7M + 2M for keygen
  #apk add age

  #e2fsprogs

  # apk add lvm2


  rc-update add networking default
  rc-update add dropbear default

  #  rc-update add connman boot
  rc-update add acpid boot

  rc-update add hwclock boot
  rc-update add syslog boot
  # From eudev package
  rc-update add udev sysinit
  rc-update add udev-trigger sysinit

  rc-update add cgroups sysinit
  rc-update add ntpd boot

  rc-update add wpa-supplicant boot
  rc-update add dropbear default
  rc-update add udev sysinit
  rc-update add udev-settle sysinit
  rc-update add udev-trigger sysinit

  # Temp - debug only
  # TODO: in initrd, patch /etc/shadow to remove password instead
  # would be useful with all cloud images...
  passwd -d root

}

# Base users, groups, packages.
alpine_add_base() {
  [ -f /etc/resolv.conf ] ||  echo "nameserver 1.1.1.1" > /etc/resolv.conf
  echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories


  mkdir -p /boot/efi
  mkdir -p /lib/modules
  mkdir -p /lib/firmware
  mkdir -p ${WORK}
  mkdir -p /mnt/usb

  addgroup -g 1000 build
  addgroup -g 999 admin

  adduser -G build -g "Builder" build -u 1000 -D -s /bin/bash -h /x/build
  adduser -G admin -g "Admin" admin -u 999 -D -s /bin/bash -h /x/build

  # Disable IPv6 for now - seems to be broken in some cases. Can be enabled in rootfs.
  echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf

# -H: don't create home
# -D: no pass
# -S - system user - nologin (i.e. /bin/login and passwd access will be disabled - ssh ok)
# -g - 'gecos' or name
  # Enable a system user to use login:
  #passwd -u build
  # Remove password: -d

}

alpine_clear() {
  rm /var/lib/dbus/machine-id || true
  rm /etc/hostname || true
  echo "" > /etc/machine-id || true
}

alpine_add_extra() {
  apk add bash bash-completion 

  apk add bridge
}

$*
