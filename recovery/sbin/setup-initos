#!/bin/sh

# Build script for initos. The functions are called typically called in a docker container - but should work
# on any VM that has the right tools.
#
# The results:
# - creating a 'base-recovery' image, that can be run in Docker in a trusted machine to generate signed
# artifacts including bootstrap ssh authorized keys and user-specific roots of trust.
#
# - creation of a directory containing all artifacts needed for install by copying to an existing
# USB EFI partition.
#

set -x
set -e

# Work dir for temp files/cache.
# Can be a btrfs subvolume, or a tmpfs. I have a btrfs mounted on/x/, and use vol
# for 'volumes'.
WORK=${WORK:-/x/initos}

# For running the steps that need a container, use this shared dir and source dir.
# Should be mounted in docker, will be created on the USB/recovery.
SRCDIR=${SRCDIR:-/ws/initos}

mkdir -p ${WORK}/img ${WORK}/efi/EFI/BOOT ${WORK}/usb/EFI/BOOT


# Build the initramfs for the real kernel
# Expectes /boot, /lib/modules, /lib/firmware to have the right
# mounts and /boot/version to hold the desired kernel version.
# 
# This runs in an alpine container (for now) - the init will be based
# on the lighter musl binaries.
build_initrd() {
  local VER=${1:-$(cat /boot/version)}
  local img=${2:-/boot/initos-initrd.img}

  [ ! -f /lib/modules/${VER}/modules.dep ] && echo "Missing modules" && return

    # Uses mkinitfs.conf added from file in the docker image.
    # Other options: virtio, squashfs, 9p, raid, cdrom, lvm, ext4, kms (video)

    # -k - keep the file
    # -t - temp dir where all is stored
    # -i - what init file to use - replace default with our script.
    #rm -rf ${WORK}/initrd
    # -k -t ${WORK}/initrd

    # Technically cryptsetup, tpm, btrfs could be loaded from recovery
    # image, with a double pivot.
    echo "features=\"ata base btrfs keymap mmc nvme scsi usb cryptsetup squashfs tpm2 initos eudev\"" > /etc/mkinitfs/mkinitfs.conf
    cp /etc/passwd /usr/share/mkinitfs/passwd
    cp /etc/group /usr/share/mkinitfs/group

    # clevis ? 
    #rm -rf ${WORK}/initfs.host
    # -t ${WORK}/initfs.host
    mkinitfs -k  -i /sbin/init-usb \
      -F "ata mmc nvme scsi usb base btrfs keymap cryptsetup squashfs tpm2 initos eudev" \
      -o ${img}  $VER

    # Add -k to keep and inspect
    # Currently 90M, 54M in modules.

    #rm -rf /tmp/*  
}

# vinit updates the initramfs for the virt kernel
# Expectes /boot, /lib/modules, /lib/firmware to have the right
# mounts and /boot/version-virt to hold the desired kernel version.
# 
# This runs in an alpine container (for now) - the init will be based
# on the ligher musl binaries.
vinit() {
  VER=${1:-$(cat /boot/version-virt)}
  if [ -z ${VER} ]; then
    return
  fi
  mkdir -p ${WORK}/vimg/

  # btrfs is pretty slow for a VM - the rootfs may have all the modules
  # and load it as needed.
  # squashfs may not be needed if modules/firmware are on the ext4 rootfs
  # or on virtio.
  mkinitfs -k  -i /sbin/init-vm \
     -F "base btrfs squashfs virtio initos" \
     -o /boot/initos-vinitrd.img ${VER}
}


# Generate an unsigned efi image, based on alpine with a custom init script.
# alpine_initrd is run in an alpine container, rescue or chroot.
#
# The init image will be generated in /boot/initramfs.
# Modules are expected to be in /lib/modules/modules-KERNEL_VERSION
# Kernel is expected to be in /boot/vmlinux-KERNEL_VERSION
#
# For secure mode, kernel+initrd+cmdline are signed, but the rootfs needs to
# be either signed or on a LUKS partition ( where encryption+signing happens as well).
#
# In the first case, normally the SHA of the rootfs needs to be passed as an argument
# either in kernel cmdline or as a file in initrd.
#
# The '@firmware' and '@modules' subvolumes must also be created
# if using separate volumes - for now they're in @recovery rootfs.

# Generate the key pairs for signing the kernel and the disk image.
# This is done before install - as a separate step/process - the rest can be automated easily,
# but signing must be done on a secure machine and is specific to each user.
sign_init() {
  local u=${DOMAIN:-webinf.info}

  efi-mkkeys -s ${u} -o /etc/uefi-keys
    
  openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:P-256 \
     -out /etc/uefi-keys/root.key
  openssl ec -in /etc/uefi-keys/root.key -pubout -out \
     /etc/uefi-keys/root.pem
  ssh-keygen -y -f /etc/uefi-keys/root.key > \
     /etc/uefi-keys/authorized_keys

}

sign2() {
  # Build the initrd and EFI images.
  ver=${1:-$(cat /boot/version)}
  DEST=${2:-/x/initos}
  set -e

  # Alpine expects keys on /etc/uefi-keys/{db.crt,db.key}
  if [ ! -f /etc/uefi-keys/db.crt ]; then
    sign_init
  fi

  mkdir -p ${DEST}/usb/EFI/BOOT/ \
     ${DEST}/secure/EFI/BOOT \
     ${DEST}/usb/EFI/KEYS ${DEST}/img

  cp /etc/uefi-keys/*.auth ${DEST}/usb/EFI/KEYS
  cp /etc/uefi-keys/*.crt ${DEST}/usb/EFI/KEYS
  cp /etc/uefi-keys/*.cer ${DEST}/usb/EFI/KEYS
  
  cp /etc/uefi-keys/authorized_keys /boot/
  cp /etc/uefi-keys/root.pem /boot/

  # TODO: if hash is missing, use verity to sign it now
  if [ ! -f /boot/hash.recovery ]; then
    veritysetup format \
    --root-hash-file=/boot/hash.recovery \
    /boot/recovery.sqfs \
    /boot/recovery.sqfs.verity
  fi

  # workaround for docker - mount this directory to get the latest
  # not required.
  if [ -d /opt/initos/sbin ]; then
    cp /opt/initos/sbin/* /sbin
  fi

  # Additional cpio files - keys, current init
  (find /boot/hash* \
        /boot/root.pem \
        /sbin/init* \
        /boot/authorized_keys \
   | sort \
   | cpio --quiet --renumber-inodes -o -H newc \
   | gzip) > /tmp/initos-hashes.cpio.gz

  local cmd="console=ttyS0 console=tty1 net.ifnames=0 panic=5"
  echo "$cmd loglevel=6 debug_init rdinit=/sbin/init-usb iomem=relaxed" > /boot/cmdline

  echo "$cmd loglevel=0 quiet rdinit=/sbin/init-secure" > /boot/cmdline.secure

  KERNEL=/boot/vmlinuz-${ver}

  efi-mkuki \
      -c /boot/cmdline \
      -o ${DEST}/usb/EFI/BOOT/BOOTx64.EFI \
        ${KERNEL} \
        /boot/intel-ucode.img /boot/amd-ucode.img \
        /boot/initos-initrd.img \
        /tmp/initos-hashes.cpio.gz

  efi-mkuki \
    -c /boot/cmdline.secure \
    -o /tmp/tmp.EFI \
      ${KERNEL} \
      /boot/intel-ucode.img /boot/amd-ucode.img \
      /boot/initos-initrd.img \
      /tmp/initos-hashes.cpio.gz

  sbsign --cert /etc/uefi-keys/db.crt \
    --key /etc/uefi-keys/db.key \
    --output ${DEST}/secure/EFI/BOOT/BOOTx64.EFI \
    /tmp/tmp.EFI

  rm /tmp/tmp.EFI

  if [ ! -f ${DEST}/img/recovery.sqfs.img ]; then
    cp /boot/recovery* ${DEST}/img
  fi
  ls -l /boot/hash*
  chmod -R 755 /x/initos
}

#    sigfile=${hashfile}.sig
#    cat $hashfile | xxd -r -p | openssl dgst \
#      -sha256 -sign /etc/uefi-keys/root.key \
#      -out root_hash.sig


recovery_sqfs() {
  local name=${1:-recovery}
  local DIR=${2:-/x/initos/img}

  # -one-file-system also works on the host - but not so well in a container.
  cd /
  mkdir -p ${DIR}
  rm -f ${DIR}/${name}.sqfs

  # buildah unshare -m A=debui -- \
  #  sh -c 'tar -cf - -C ${A} .' | \
  #   sqfstar ${WORK}/vimg/virt.sqfs -e .dockerenv

  mksquashfs . ${DIR}/${name}.sqfs \
     -regex \
     -e "x/.*" \
     -e ".dockerenv" \
     -e "boot/.*" \
     -e "proc/.*" \
     -e "sys/.*" \
     -e "run/.*" \
     -e "work/.*" \
     -e "ws/.*" \
     -e "tmp/.*" \
     -e "etc/apk/cache.*"

  veritysetup format \
    --root-hash-file=${DIR}/hash.${name} \
    ${DIR}/${name}.sqfs \
    ${DIR}/${name}.sqfs.verity
}


chk_firmware() {
  set +x
  # Get a list of all loaded modules - mostly AI generated.
  modules=$(lsmod | awk 'NR>1 {print $1}')

  for module in $modules; do
    modinfo_output=$(/usr/sbin/modinfo $module)

    # Extract firmware information
    #firmware_lines=$(echo "$modinfo_output" | grep -i 'firmware:')
    firmware_lines=$(echo "$modinfo_output" | grep -ioE 'firmware:[[:space:]][^ ]+' | cut -d ' ' -f2-)

    if [ -n "$firmware_lines" ]; then
      echo $module
      while read -r firmware; do
          echo "$module: $firmware"
      done < "$firmware_lines"
    fi
  done
}

alpine_clear() {
  rm /var/lib/dbus/machine-id || true
  rm /etc/hostname || true
  echo "" > /etc/machine-id || true
}


# Add the Alpine ISO image to the boot disk (expanded to EFI instead of ISO)
# This is useful for recovery if recovery fails. 
# efi_alpine_installer() {
#   set -e
#   mkdir -p ${DIST} ${WORK}/boot

#     if [ ! -f ${WORK}/alpine.iso ]; then
#       curl -Lo ${WORK}/alpine.iso https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-standard-3.20.3-x86_64.iso
#     fi
#     cd ${WORK}/dist
#     bsdtar xf ${WORK}/alpine.iso
#     cfgf=$(ls ${DIST}/boot/config-*)

# }

export DEBIAN_FRONTEND=noninteractive
APTINSTALL="apt install --assume-yes --no-install-recommends "

# Adds Kernel, firmware, Nvidia driver.
# Builds the initrd images for intel/amd uCode.
# This adds X
add_deb_kernel_nvidia() {

  echo deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware >> /etc/apt/sources.list

  apt update
  export INITRD=No
  apt install -y --no-install-recommends \
    nvidia-driver
}

# Adds Kernel, firmware, Nvidia driver.
# Builds the initrd images for intel/amd uCode.
add_deb_kernel() {
  echo deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware >> /etc/apt/sources.list

  apt update
  export INITRD=No
  apt install -y --no-install-recommends \
   linux-image-amd64 firmware-misc-nonfree \
     firmware-linux-free \
       firmware-realtek \
       firmware-iwlwifi firmware-atheros \
       amd64-microcode intel-microcode

  TMPDIR=/tmp/initrd
  rm -rf $TMPDIR
  mkdir $TMPDIR

  cd $TMPDIR
  mkdir -p kernel/x86/microcode

  if [ -d /lib/firmware/amd-ucode ]; then
    cat /lib/firmware/amd-ucode/microcode_amd*.bin > kernel/x86/microcode/AuthenticAMD.bin
  fi
  find . | cpio -o -H newc >/boot/amd-ucode.img
  
  rm -rf kernel
  mkdir -p kernel/x86/microcode
  if [ -d /lib/firmware/intel-ucode ]; then
   cat /lib/firmware/intel-ucode/* > kernel/x86/microcode/GenuineIntel.bin
  fi

  find . | cpio -o -H newc >/boot/intel-ucode.img

  ver=$(ls /lib/modules)
  echo -n ${ver} > /boot/version

  # Can't stop the creation - but not used. Just need the kernel and modules.
  rm -rf /boot/initrd.img* /tpm/* || true
}


# debootstrap_kernel() {
#   mkdir /tmp/deb
#   debootstrap --variant=minbase --print-debs sid  /tmp/deb

# }

$*
