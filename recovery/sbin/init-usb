#!/bin/sh

# Init script for USB and 'debug' boot - should NOT be used with
# signed UKI images since it provides root shell access.
#
# Use for installing to signed UKI - followed by enabling secure boot.
# In case of problems - disable secure boot and use this image.
#
# Will use the rootfs from USB disk, if a USB disk is found.

# Issue: on first boot into secure mode, LUKS will not be unlocked
# since we changed the parameters. So first time requires a ssh access
# from the 'control plane' to save the key into TPM2. The control plane
# has the root key to unlock the LUKS recovery.

. /sbin/init-common.sh


# Main entry point - called by the init script
initramfs_init() {
  initramfs_common
  initramfs_mods_usb
  
  sleep 1
  retry 4 findfs LABEL=USBBOOT

  # TODO: This is intended for recovery from USB - even if loaded 
  # from main drive will look on USB first

  bootd=$(findfs LABEL=USBBOOT)
  if [ -n "$bootd" ]; then
    mount_disk $bootd vfat /boot/efi
    # /initos/recovery
    mount_boot
    logi "Boot USB_BOOT mounted on /boot/efi from $bootd mode=$MODE $(ls /initos/recovery/lib/modules)"
  fi
  
  if [ "${MODE}" = "a" ]; then
    echo "After Verify sqfs mount."
    busybox ash
  fi

  if [ ! -d /boot/efi/EFI ]; then
    echo "Failed to mount the EFI partition, should be named USBBOOT"
    echo "Find and mount it using mount_disk PART vfat /z; mount_boot"
    blkid
    busybox ash
  fi

  # Also mount the efi from the disk, if it exists.
  bootd=$(findfs LABEL=BOOT)
  if [ -n "$bootd" ]; then
    mount_disk $bootd vfat /boot/efi2
    logi "Boot BOOT mounted on /boot/efi2 from $bootd"
  fi

  # /initos/recovery now has the RW host root
  load_drivers
  
  # At this point we may have a tpm and may be able to mount
  # encrypted disk, but the TPM should NOT have the key - USB boot
  # is not signed, and the TPM should NOT be set
  # without enabling secure boot. 

  if [ "${MODE}" = "r" ]; then
    # Don't even attempt to find TPM and mount encrypted disk.
    mount_recovery
    chroot /sysroot passwd -d root
    logi "Recovery requested and mounted"
  elif [ "${MODE}" = "a" ]; then
    echo "USBBOOT mounted on /z, sqfs mounted on /boot/efi/initos, firmware and modules mounted"
    mount_recovery
    chroot /sysroot passwd -d root
    busybox sh
  elif [ "${MODE}" = "c" ]; then
    open_luks_manual
    if [ -d /x/initos ]; then 
      mount_rootfs /dev/mapper/c
    else
      mount_recovery
    fi
  else
    # This is not encrypted - but on a removable disk that is used to boot,
    # any distro can do the same thing.
    # 
    # The intented use is unattended install, wiping out
    # the disk.
    bootd=$(findfs LABEL=USB_BOOT_BTRFS)
    if [ -n "$bootd" ]; then
      mount_btrfs_raw $bootd /x
      if [ -d /sysroot/etc ]; then
        logi "Boot USB_BOOT_BTRFS mounted on /x from $bootd mode=$MODE"
      fi
      mount_rootfs $bootd
    fi
 
    if [  -d /sysroot/etc ]; then
      logi "Rootfs mounted"
    else
      mount_recovery
      chroot /sysroot passwd -d root
    fi
  fi

  if [ ! -d /sysroot/etc ]; then
    logi "Failed to mount recovery"
    /bin/busybox sh
  fi

  if [ "$MODE" = "a" ]; then
    logi "Run additional setup before - root is in /sysroot"
    /bin/busybox sh
  fi

  if [ "$MODE" = "r" ]; then
    logi "Run additional setup before - root is in /sysroot"
    chroot /sysroot passwd -d root
    /bin/busybox sh
  fi

  root_conf

  move_mounted_to_sysroot


  if [ "$MODE" = "a" ]; then
    # Like single mode - normal boot, but the a shell in the sysroot
    # Also get shells in different execution points for debug.
    if [ ! -f /sysroot/bin/sh ]; then
      echo "Missing init "
      /bin/busybox sh
    fi
    exec switch_root /sysroot /bin/sh
  elif [ "$MODE" = "r" ]; then
    busybox ash
    if [ ! -f /sysroot/sbin/init-pod ]; then
      echo "Missing init "
      /bin/busybox sh
    fi
    exec switch_root /sysroot /sbin/init-pod host
  elif [ -f /sysroot/init ]; then
    logi "Preparing to switch root - custom init"
    exec switch_root /sysroot /init
  elif [ -f /sbin/init ]; then
    exec switch_root /sysroot /sbin/init
  else
    if [ ! -f /sysroot/sbin/init-pod ]; then
      echo "Missing init "
      /bin/busybox sh
    fi
    exec switch_root /sysroot /sbin/init-pod host
  fi
  lfatal "Failed to switch root"
}

if [ "$$" = "1" ]; then
  initramfs_init
else
  $*
fi
