# syntax=docker/dockerfile:1.10

ARG BASE=alpine:edge

# Build the 'recovery/installer' image.
# Unlike common dockerfiles, there is one RUN for a script - the script can be used independently of Dockerfiles

FROM ${BASE} as recoverybase

# Required if base is setting a different user ( like sunshine )
USER root
ENV LANG C.UTF-8

# Rest of the files
COPY ./recovery/sbin/setup-recovery /sbin/setup-recovery

# This add the 'base' - should be close to the packages on the alpine installer.
RUN  --mount=target=/etc/apk/cache,id=apk,type=cache \
    /sbin/setup-recovery install

FROM recoverybase as recovery

# Rest of the files
COPY ./recovery/ /
        

######## Step 2. Download kernels and modules
# (step 1 is to build the recovery docker image, may use the pre-built one)
FROM debian:bookworm as deb

RUN --mount=target=/var/lib/cache,id=apt,type=cache <<EOF
 echo deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware >> /etc/apt/sources.list

 apt update

 apt install -y --no-install-recommends firmware-linux-free \
   firmware-misc-nonfree \
   firmware-realtek \
   linux-image-amd64

EOF

######## Step 3. Build the .SQFS files and alpine EFI
FROM  recoverybase as alpine-firmware

RUN --mount=target=/etc/apk/cache,id=apk,type=cache <<EOF
  /sbin/setup-recovery linux_alpine
EOF

######  Build the deb EFI
FROM  recovery as deb-efi

COPY --from=deb --link /lib/modules/ /lib/modules
COPY --from=deb --link /boot/ /boot/
COPY --from=alpine-firmware --link /lib/firmware/ /lib/firmware
COPY --from=alpine-firmware /boot/intel-ucode.img /boot/
COPY --from=alpine-firmware /boot/amd-ucode.img /boot/

COPY ./recovery/sbin/ /sbin/
RUN  <<EOF
    ver=$(ls /lib/modules)
    # This will be the default version
    echo -n ${ver} > /boot/version
    mkdir -p /x/initos/boot
    cp -r /boot/* /x/initos/boot/

    /sbin/setup-initos efi
    mkdir -p /x/initos/EFI/BOOT
    cp /x/initos/boot/InitOS-${ver}.EFI /x/initos/EFI/BOOT/BOOTx64.EFI
EOF


########  Download the deb EFI virtual
FROM debian:bookworm as vdeb

RUN --mount=target=/var/lib/cache,id=apt,type=cache <<EOF
    echo deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware >> /etc/apt/sources.list

    apt update

    apt install -y --no-install-recommends \
          linux-image-cloud-amd64
EOF

########  Build the deb EFI virtual
FROM  recovery as vdeb-efi

COPY --from=vdeb --link /lib/modules/ /lib/modules/
COPY --from=vdeb --link /boot/ /boot/

COPY ./recovery/sbin/setup-initos /sbin/
RUN  <<EOF
    mod_dir=$(ls /lib/modules)
    echo -n ${mod_dir} > /boot/version-virt
    DST=/x/initos/virt /sbin/setup-initos mods_sqfs
EOF

COPY ./recovery/sbin/ /sbin/
RUN  /sbin/setup-initos vinit

########
######
FROM  recovery as recovery_sqfs

RUN  /sbin/setup-initos recovery_sqfs

#####
FROM  recoverybase as firmware_sqfs

COPY --from=alpine-firmware --link /lib/firmware/ /lib/firmware

RUN /sbin/setup-recovery firmware_sqfs

######
FROM  recoverybase as mods_sqfs

COPY --from=deb --link /lib/modules/ /lib/modules
RUN  <<EOF
    ver=$(ls /lib/modules)
    echo -n ${ver} > /boot/version
    /sbin/setup-recovery mod_sqfs $ver
EOF


########  Build the full image - can directly sign and generate usb, 
# includes the VM kernel/initrd as well (42M).
# About 1.3G firmware, 400M modules, 50M boot - total 2G
# the alpine binaries are about 180M.

FROM recovery as full
COPY --from=deb --link /lib/modules/ /lib/modules
COPY --from=deb --link /boot/ /boot/
COPY --from=alpine-firmware --link /lib/firmware/ /lib/firmware
COPY --from=alpine-firmware /boot/intel-ucode.img /boot/
COPY --from=alpine-firmware /boot/amd-ucode.img /boot/
COPY --link --from=vdeb-efi /x/initos /x/initos

### Generate the binary images - can be used with the basic recovery 
# to sign and generate the USB
FROM scratch as out
COPY --link --from=firmware_sqfs /x/initos ./
COPY --link --from=mods_sqfs /x/initos ./
COPY --link --from=recovery_sqfs /x/initos ./
COPY --link --from=vdeb-efi /x/initos ./
COPY --link --from=deb-efi /x/initos ./




    