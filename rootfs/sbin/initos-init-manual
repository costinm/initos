#!/bin/sh

source /sbin/initos

# Initialization in 'secure' (signed) mode with manual unlock.
# 
# User must enter a password to unlock the LUKS encryption - laptops 
# or servers lacking TMP2. 
# 
# It is likely more secure than standalone servers with TPM2 - but can't 
# do unattended boot.

# Main entry point - called by the init script
initos_init() {  
  logi "Starting INITOS manual unlock $(uname -r)"
  
  # Additional drivers with the real firmware and modules mounted. 
  # Wil the drivers are loaded/settiling, asks for a key - set as MODE - which determines how to load persistent disk.
  load_drivers

  open_luks_manual
  
  mount_btrfs_raw /dev/mapper/c /x
  if [ $? -eq 0 ]; then
      logi "BTRFS mounted"
  else
      lfatal "Failed to mount btrfs"
  fi

  start_os
}

# open LUKS drive using keyboard
# If successful, /x will be mounted as btrfs, and an /x/initos will
# exist.
# 
# TODO: ask for pass, use the pass to unlock all disks
open_luks_manual() {
  cryptd=$(blkid | grep 'TYPE="crypto_LUKS"' | cut -d: -f1 )
  if [ -n "$cryptd" ]; then
    echo
    echo "Enter unlock password (LUKS for $cryptd)"
    echo

    cryptsetup luksOpen $cryptd c
    if [ $? -eq 0 ]; then
      echo
      echo
      logi "Manual unlock worked ${cryptd}" 
      return 0
    fi
  fi
  return 1
}

open_luks_manual2() {
  echo -n "Enter the disk (LUKS) password"
  read -s KEY
  open_disks "$KEY"
}

open_disks() {
  local KEY=$1
  #parts=$(blkid | grep 'TYPE="crypto_LUKS"' | cut -d: -f1 )
  parts=$(blkid -t TYPE=crypto_LUKS -o device )
  
  echo "$parts" | while read -r part; do 
    echo -n "$KEY" | cryptsetup open $part luks-$(basename "$part") -
    if [ $? -eq 0 ]; then
      logi "Opened $part"
    else 
      echo "Attempt to unlock $part failed"
    fi
  done
}

# If running as PID=1 (from initrd): run initos_init or
# a different function (like vm_init)
if [ "$$" = "1" ]; then
  if [ -z ${1+x} ] ; then
    initos_init
  else 
    # Run one of the functions
    "$@"
  fi
else
  "$@"
fi
