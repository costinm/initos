#!/bin/sh

export PATH="$PATH:/usr/bin:/bin:/usr/sbin:/sbin"

# Initialization in 'secure' (signed) mode with manual unlock.
# 
# User must enter a password to unlock the LUKS encryption - laptops 
# or servers lacking TMP2. 
# 
# It is likely more secure than standalone servers with TPM2 - but can't 
# do unattended boot.

# Main entry point - called by the init script
initos_init() {  
  logi "Starting INITOS manual unlock $(uname -r)"
  
  # Additional drivers with the real firmware and modules mounted. 
  # Wil the drivers are loaded/settiling, asks for a key - set as MODE - which determines how to load persistent disk.
  /sbin/initos-init-tpm2 load_drivers

  mount_persistent

  exec /sbin/initos-init-tpm2 start_os
}

# Different options and environments for mounting a sysroot:
# Defaults:
# - from a LUKS btrfs, using TPM (for secure)
# - a regular btrfs (label 'install' or 'x') for 'usb' and 'insecure' images
# Key on startup:
# - LUKS+btrfs opened manually, if 'c' or 'a' option was selected
# - remote recovery - if 'r' was selected or other options fail
# 
mount_persistent() {
    # LUKS on /x, if user types the password
    open_luks_manual
    mount_btrfs_raw /dev/mapper/c /x
    if [ $? -eq 0 ]; then
        logi "BTRFS mounted using user key"
        return 0
    fi

    lfatal "Failed to open LUKS"
}

# Info log - shown on console, logged.
logi() {
	last_emsg="$*"
	echo "INITOS: $last_emsg..." > /dev/kmsg
	echo "$last_emsg\n"
}

lfatal() {
  /sbin/initos-init-tpm2 lfatal $*
}

# open LUKS drive using keyboard
# If successful, /x will be mounted as btrfs, and an /x/initos will
# exist.
# 
# TODO: ask for pass, use the pass to unlock all disks
open_luks_manual() {
  cryptd=$(blkid | grep 'TYPE="crypto_LUKS"' | cut -d: -f1 )
  if [ -n "$cryptd" ]; then
    logi Attempting to mount LUKS using keyboard $cryptd
    cryptsetup luksOpen $cryptd c
    if [ $? -eq 0 ]; then
      logi "Manual LUKS ok ${cryptd}" 
      return 0
    fi
  fi
  return 1
}

mount_btrfs_raw() {
  local root_device=${1}
  local dst=${2}

  BTRFS_OPTS="-o nobarrier"
  #  -o compress

  mkdir -p ${dst}

  mount -t btrfs "${root_device}" ${dst}
  if [ $? -ne 0 ]; then
      logi "Error: Failed to mount BTRFS partition"
      return 1
  fi
}

# If running as PID=1 (from initrd): run initos_init or
# a different function (like vm_init)
if [ "$$" = "1" ]; then
  if [ -z ${1+x} ] ; then
    initos_init
  else 
    # Run one of the functions
    $*
  fi
else
  $*
fi
