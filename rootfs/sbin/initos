#!/bin/bash

# Helpers and utils for initos. Mostly used in the host sideacar.
mesh_init() {
  local dev=wlan0
  iw dev ${dev} interface add mesh0 type mesh
  ip link set mesh0 up

  # iw dev wlan0 del
  # iw phy # show info - phy0 should have "P2P-GO" and "mesh"
  wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant_mesh.conf -i mesh0
  iw dev mesh0 mpath dump


  iw phy phy0 interface add p2p0 type p2p-device
  ip link set p2p0 up
  wpa_cli -i p2p0 p2p_find p2p_connect p2p_group_add
}

# Fix terminal on laptop - for example if the screen is gone or the sensor
# for closing the screen is broken
fixtty() {
  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty2

  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty0
  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty1
}

init_sidecar() {
  logi "Starting InitOS as a sidecar"
  # TODO: start a ssh on 15022 or similar, to not interfere with 
  # host (if any)
  # 
  # TODO: maybe start tini, if the host is just running a command.
  sleep infinity
}

# Sidecar is run at startup from rc.local, after swap_root, once.
# 
# chroot /initos/rootfs can be used after.
# Not needed if the 'real' rootfs is running in a container or VM.
# Systemd is killing all processes - so this is started from systemd (or native OS).
sidecar() {
  # Using chroot to run a different image, not to isolate.
  mount -o bind /x /initos/rootfs/x
  mount -o bind / /initos/rootfs/sysroot
  
  # The arch script takes care of sys, etc.
  /initos/rootfs/usr/bin/arch-chroot \
    /initos/rootfs /sbin/initos init_sidecar &
}

startui() {
   # TODO: may execute some startup from /x
  if [ -f /etc/init.d/seatd ]; then
    addgroup build seat
    /etc/init.d/seatd start
    /etc/init.d/polkit start
  fi

  /etc/init.d/agetty.tty2 start


  export XDG_RUNTIME_DIR=/run/user/$(id -u build)
  mkdir -p $XDG_RUNTIME_DIR
  chown build $XDG_RUNTIME_DIR
  export HOME=/home/build


  # TODO: loop showing the interface in secure mode, maybe with
  # a small shell to read a set of commands.

  # DEBUG ONLY
  su - build -c 'labwc -s foot' &

  #sh
    # Takes care of zombies
  exec tini -s sleep -- infinity 
}

lspkg() {
  dpkg --get-selections | grep -v deinstall > /tmp/packages1.txt
  apt-mark showmanual > /tmp/packagesm.txt 
  dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
}




"$@"