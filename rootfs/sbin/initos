#!/bin/bash

# Various small scripts to automate post-boot use in the host sidecar. 
# 

# Sidecar is run at startup from rc.local, after swap_root, once.
# 
# chroot /initos/sidecar can be used after.
# Not needed if the 'real' rootfs is running in a container or VM.
# Systemd is killing all processes - so this is started from systemd (or native OS).
sidecar() {
  # Using chroot to run a different image, not to isolate.
  mount -o bind /x /initos/sidecar/x
  mount -o bind / /initos/sidecar/sysroot
  
  # The arch script takes care of sys, etc.
  /initos/sidecar/usr/bin/arch-chroot \
    /initos/sidecar /sbin/initos init_sidecar &

  # alternative: docker/podman/direct crun to keep it in a 
  # priv container. 
}

# init_sidecar is called in a chroot or privileged container, from
# a systemd-rootfs. 
init_sidecar() {
  logi "Starting InitOS as a sidecar"

  # TODO: start a ssh on 15022 or similar, to not interfere with 
  # host (if any)
  # 
  # TODO: maybe start tini if running as 1 (container)
  sleep infinity
}

# StartUI is called as root.
startui() {
   # TODO: may execute some startup from /x
  if [ -f /etc/init.d/seatd ]; then
    addgroup build seat
    /etc/init.d/seatd start
    /etc/init.d/polkit start
  fi

  /etc/init.d/agetty.tty2 start

  ui

  #libinput list-devices

  # TODO: loop showing the interface in secure mode, maybe with
  # a small shell to read a set of commands.

  # DEBUG ONLY
  #su - build -c 'labwc -s foot' &

  #sh
    # Takes care of zombies
  exec tini -s sleep -- infinity 
}

ui() {
  # As user build (can customize it) 
  export HOME=/home/build
  export XDG_RUNTIME_DIR=/run/user/$(id -u build)
    
  #sway &
  labwc -s foot &
}

lsgrp() {
  for d in /sys/kernel/iommu_groups/*/devices/*; do
     n=${d#*/iommu_groups/*}; 
     n=${n%%/*}; 
     printf 'IOMMU Group %s ' "$n"; 
     lspci -nns "${d##*/}"; 
  done;
}


lspkg() {

  dpkg --get-selections | grep -v deinstall > /tmp/packages1.txt
  apt-mark showmanual > /tmp/packagesm.txt 
  dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
}

# Mokutil requires a corresponding EFI.
# /usr/share/efitools contains a set of EFI programs.
# efi-readvar shows the keys in the system.
mok() {
  mokutil --sb-state
  mokutil --list-enrolled
  mokutil --pk /boot/efi/initos/KEYS/PK.cer
  mokutil --kek 
  mokutil --db
  # Looks for /var/lib/sbctl/keys/db/db.key
  # sbctl enroll-keys -a -c --yes-this-might-brick-my-machine
}


efibackup() {
  for i in PK KEK db dbx; do efi-readvar -v $i -o $i.esl; done

  # Installing keys:
  # db.auth,  KEK.auth and PK.auth added to bios from USB disk

  # Alternative:
  # apk update
  # apk add sbctl
  # sbctl create-keys
  # sbctl sign /boot/efi/Alpine/linux-lts.efi
  # sbctl enroll-keys -m
}

# On debian, find the explicitly installed packages
find_installed_deb() {
  dpkg --get-selections | grep -v deinstall | cut -f1
}


# Check all files and meeta checksums. Reports go to /var/lib/btrfs.
# Docs recommend monthly, from cron. Will use 80% of bw.
scrub() {
  btrfs scrub start -B /x
  btrfs filesystem defrag -v -r -f -t 32M /x
  duperemove -dhr /x
  btrfs balance start -m /x
}

mesh_init() {
  local dev=wlan0
  iw dev ${dev} interface add mesh0 type mesh
  ip link set mesh0 up

  # iw dev wlan0 del
  # iw phy # show info - phy0 should have "P2P-GO" and "mesh"
  wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant_mesh.conf -i mesh0
  iw dev mesh0 mpath dump


  iw phy phy0 interface add p2p0 type p2p-device
  ip link set p2p0 up
  wpa_cli -i p2p0 p2p_find p2p_connect p2p_group_add
}

# Fix terminal on laptop - for example if the screen is gone or the sensor
# for closing the screen is broken
fixtty() {
  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty2

  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty0
  setterm --blank=force --powersave=powerdown --powerdown=1 --store --term linux <>/dev/tty1
}





"$@"