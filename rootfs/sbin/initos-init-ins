#!/bin/bash

export PATH="$PATH:/usr/bin:/bin:/usr/sbin:/sbin"

# This script runs in the recovery image, after initrd mounts the 
# signed root - however it is only run when the boot loader is
# not set to secure mode, so UKI is not verified. The SQFS signature
# is still useful for integrity - but doesn't have any security.

# That means:
# - anyone who has access to the machine can read and modify the disk
#  by booting from USB or removing the disk
# - the machine can't be trusted

# It is ok for old laptops used for testing or shared devices
# or doing specialized tasks (camera, etc)

# Main entry point - called by the init script
initos_init() {  
  
  logi "Starting INSECURE INITOS $(uname -r) ${SECURE_MODE}"
  

  load_drivers

  echo "Insecure boot - before switch root, enter 'a' for admin shell at start, b at end"
  read -t 4 -n 1 key
  if [ "$key" = "a" ]; then
    sh 
  fi 

  # This may init the /x drive for testing (credentials on the EFI dir instead
  # of TPM or user input).
  # 
  # This replaces open_disks using TPM or prompt, may set USE_SYSTEMD for testing debian
  # as root. If it doesn't mount the disks - will run the installer and wipe the rest of the disk.
  if [ -f /boot/efi/install/autosetup.sh ]; then
    # May call open_disks, mount_btrfs_raw 
    bash -x /boot/efi/install/autosetup.sh init
  fi 

  btrfs device scan --all-devices

  # TODO: use LABEL=INITOSROOT instead of mapper name
  mount -t btrfs LABEL=INITOSROOT /x

  mount -t btrfs /dev/mapper/luks-1 /x



  if [ "$key" = "b" ]; then
    sh 
  fi 

  # If the test script mounted initos - run it.
  # otherwise - unatended install.
  if [ -d /x/initos/etc ]; then
    echo "BTRFS mounted on /x using secrets on EFI partition"
   
    # The SQFS image is debian.
    if [ "$USE_SYSTEMD" = "1" ]; then
      echo "Starting in debian/systemd mode"
      run_standalone
  
      # From local files - should not be included on local
      if [ -f /x/initos/etc/wpa_supplicant/wpa_supplicant.conf ]; then
        cp /x/initos/etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
        systemctl enable wpa_supplicant@wlan0.service
      fi
      
      exec /usr/bin/systemd --system
    fi

    start_os # May switch root !

    echo "After start_os"

    if [ -f /boot/efi/install/autosetup.sh ]; then
      # May call open_disks, mount_btrfs_raw 
      bash -x /boot/efi/install/autosetup.sh end
    fi 
    # TODO: run autosetup.sh again to do checks or get a shell.
    exec bash
  else
    echo "Installer mode"
    sh
    # Copy files from install.
    patch_rootfs /boot/efi/install /

    # Init networking, SSH, etc - using the EFI configs
    run_standalone_start 
  
    # #start_ui

    # # Experimenting with different ways to autologin and 
    # # start sway on an old insecure laptop.
    # getty 38400 /dev/tty5 -n -l /bin/sh &
    # getty 38400 /dev/tty3 -n -l /sbin/autologin &
    # getty 38400 /dev/tty4 -n -l /sbin/autologin.build &
  
    if [ -f /boot/efi/install/autosetup.sh ]; then 
      sh -x /boot/efi/install/autosetup.sh autoinstall | tee  /tmp/setup.log 2>&1
    
    fi 
  fi 


  ln -s /etc/init.d/agetty /etc/init.d/agetty.tty1
  /etc/init.d/agetty.tty1 start
  sh
  exec tini -s sleep -- infinity 

}

# Add the networking files from the EFI /install dir to the
# InitOS rootfs
# 
# The installer will start as a normal InitOS, but without 
# /x mounted. It can do unattended install - but may also 
# wait for the control plane to provision it.
# 
# Normally this is run once, the first time - there is no 
# need to ssh to the machine, someone needs to set the verification
# keys in BIOS/EFI anyways.
patch_rootfs() {
  # In insecure mode and recovery, /boot/efi/install can keep 
  # network config (physical access would allow root and any config)
  dir=${1:-/boot/efi/install}

  # From EFI, not signed. Alternative is DHCP, also insecure.
  # Recovery SSH. Interfaces and ssh should be different from 
  # normal disk. 
  if [ -f ${dir}/interfaces ]; then
    cp ${dir}/interfaces /etc/network/interfaces
  fi
  if [ -f ${dir}/hostname ]; then
    cp ${dir}/hostname /etc/hostname
    export HOSTNAME=$(cat /etc/hostname) 
  fi
  if [ -f ${dir}/wpa_supplicant.conf ]; then
    cp ${dir}/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
  fi
}


export INSECURE=1
. /sbin/initos
